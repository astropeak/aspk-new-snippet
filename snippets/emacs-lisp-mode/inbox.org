
* regexp value: org mode headline/title (** a title)
  org-outline-regexp-bol: means begining of line
  (pns-get-src-block-info)
  After expand, this will become: "^\\*+[ \t]+"
  #+BEGIN_SRC elisp
  "^\\\\*+[ \t]+"
  #+END_SRC

  ;; or use this variable: org-outline-regexp-bol

* regexp tips: about back quote char(\) in regexp and in string
  Because regexp in elisp is represented by a string, and when elisp reading strings, it will frist process the back quote char. For example, for this string literal: (DEMO VERSION!) "\Aaa", after emacs get it, the back quote char already be droped.
  (eval "\yaa")
  result is "yaa".


  So if you want a back quote char go to the regexp, you should use two back quote.
  For exampel, when you want match a regural '*' literally, you should use '\*' in the regexp syntax. Bacause '*' is a special char in regexp.
  Then when you define that regexp using elisp string, (DEMO VERSION!) you should use:
  "\\*"

  After read, the string becomes to "\*".


* regexp value: a literal '*', by "\\*"
  After expandation, it will be "\\*"
  #+NAME: no-name
  #+begin_src elisp
  "\\\\*"$0
  #+end_src

* yasnippet: make not indent automatically by set yas-indent-line to 'fixed in expand-env
  The default value is 'auto. Then after expanded it will indent the content
  (yas-expand-snippet "snippet" nil nil '((yas-indent-line 'auto)))

  If set (DEMO VERSION!) to 'fixed, then the content will be fixed on current column.

  The forth parameter is a list of (VAR VALUE), you can setup many variable to control some behavir


  You can also add a '$>' to the end of lines in a snippet content to do a forced indent, even when yas-indent-line is set to 'fixed.

  #+NAME: no-name
  #+begin_src elisp
  (yas-expand-snippet "snippet" nil nil '((yas-indent-line 'fixed)))
  #+end_src

* orgmode:regexp value: src block name (#+name: )
  #+NAME: no-name
  #+begin_src elisp
  org-babel-src-name-regexp 
  #+end_src
* orgmode: regexp value: src block (#+begin_src ... #+end_src)
  #+NAME: no-name
  #+begin_src elisp
  org-babel-src-block-regexp
  #+end_src


