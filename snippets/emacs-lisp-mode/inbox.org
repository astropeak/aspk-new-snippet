
* regexp value: org mode headline/title (** a title)
  org-outline-regexp-bol: means begining of line
  (pns-get-src-block-info)
  After expand, this will become: "^\\*+[ \t]+"
  #+BEGIN_SRC elisp
  "^\\\\*+[ \t]+"
  #+END_SRC

  ;; or use this variable: org-outline-regexp-bol

* regexp tips: about back quote char(\) in regexp and in string
  Because regexp in elisp is represented by a string, and when elisp reading strings, it will frist process the back quote char. For example, for this string literal: (DEMO VERSION!) "\Aaa", after emacs get it, the back quote char already be droped.
  (eval "\yaa")
  result is "yaa".


  So if you want a back quote char go to the regexp, you should use two back quote.
  For exampel, when you want match a regural '*' literally, you should use '\*' in the regexp syntax. Bacause '*' is a special char in regexp.
  Then when you define that regexp using elisp string, (DEMO VERSION!) you should use:
  "\\*"

  After read, the string becomes to "\*".


* regexp value: a literal '*', by "\\*"
  After expandation, it will be "\\*"
  #+NAME: no-name
  #+begin_src elisp
  "\\\\*"$0
  #+end_src

* yasnippet: make not indent automatically by set yas-indent-line to 'fixed in expand-env
  The default value is 'auto. Then after expanded it will indent the content
  (yas-expand-snippet "snippet" nil nil '((yas-indent-line 'auto)))

  If set (DEMO VERSION!) to 'fixed, then the content will be fixed on current column.

  The forth parameter is a list of (VAR VALUE), you can setup many variable to control some behavir


  You can also add a '$>' to the end of lines in a snippet content to do a forced indent, even when yas-indent-line is set to 'fixed.

  #+NAME: no-name
  #+begin_src elisp
  (yas-expand-snippet "snippet" nil nil '((yas-indent-line 'fixed)))
  #+end_src

* orgmode:regexp value: src block name (#+name: )
  #+NAME: no-name
  #+begin_src elisp
  org-babel-src-name-regexp 
  #+end_src
* orgmode: regexp value: src block (#+begin_src ... #+end_src)
  #+NAME: no-name
  #+begin_src elisp
  org-babel-src-block-regexp
  #+end_src


* list: concan lists by append, like the list.extend function in python
  All the arguments should be a list. 
  The new list's elements are te elements of all the arguments.

  Some examples:
  (append '(1 2)  '(3 4)) ;; => (1 2 3 4)
  (append '(1 2)  '(3 4) 5) ;; => (1 2 3 4 . 5)
  (append '(1 2)  5 '(3 4)) ;; => error: (wrong-type-argument sequencep 5)

  #+NAME: no-name
  #+begin_src elisp
  (append ${1:list} $0)
  #+end_src

* list: list and cons cell, car, cdr
  list is not the primitive data type. A primitive data type is cons cell.

  A cons cell is a pair, the first part is called its car, the second part cdr.
  It can be created by (cons CAR CDR).
  THe car and cdr are slots that could point to any other list object. They have the same properies and same concept.

  list is made by chaining many cons cells:
  1. so a list is a cons cell
  2. the car is the first element of that list
  3. the cdr point to the next cons cell

  true list: if and only if the cdr of the last cons cell of the list equals  to nil.
  dotted list: the cdr of the last cons cell of the list doesn't equal to nil.

  e.g.,
  (1 2) is a true list. Because its last cons cell is (2)(the list consists of two cons cells), and its cdr is nil
  (1 . 2) is not a dotted list. Because its last cons cell is (1 . 2)(yes, itself, because this list consistes of only one cons cell), and its (DEMO VERSION!) cdr is 2, which (DEMO VERSION!) is a number


  Form the above definition, a list is also a cons cell, whose cdr is also a cons cell if it is a true list. A cons cell is also a list. This is confusing. But if you understand the tow's relationship, you will know it.


  Reference: lisp info: Lists and Cons Cells


* regexp: string: match a regexp in sring. BUGGY, not use!!!
  string-match is buggy, nerver use it!!!  But use re-search-forward instead(first insert the string to a temp (DEMO VERSION!) buffer)
  #+NAME: no-name
  #+begin_src elisp
  (setq content "    aaa")
  ;; (setq content "aaa")
  (setq a 
        (when (string-match "^\s+" content)
          (match-string 0)))
  (setq b
        
        (with-temp-buffer (insert content) (goto-char 1)
                          (when (re-search-forward "^\s+" nil t)
                            (match-string 0)))
        )


  (message "%s|, %s|" a b)

  (string-match "^ " content)
  (string-match "^ " " aaa")

  (string-match "^\s+" " aaa")
  (match-string 0)
  (match-beginning 0)
  (match-end 0)
  #+end_src
