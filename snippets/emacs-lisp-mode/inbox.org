
* regexp value: org mode headline/title (** a title)
  org-outline-regexp-bol: means begining of line
  (pns-get-src-block-info)
  After expand, this will become: "^\\*+[ \t]+"
  #+begin_src emacs-lisp
  "^\\\\*+[ \t]+"
  #+end_src

  ;; or use this variable: org-outline-regexp-bol

* regexp tips: about back quote char(\) in regexp and in string
  Because regexp in elisp is represented by a string, and when elisp reading strings, it will frist process the back quote char. For example, for this string literal: (DEMO VERSION!) "\Aaa", after emacs get it, the back quote char already be droped.
  (eval "\yaa")
  result is "yaa".


  So if you want a back quote char go to the regexp, you should use two back quote.
  For exampel, when you want match a regural '*' literally, you should use '\*' in the regexp syntax. Bacause '*' is a special char in regexp.
  Then when you define that regexp using elisp string, (DEMO VERSION!) you should use:
  "\\*"

  After read, the string becomes to "\*".


* regexp value: a literal '*', by "\\*"
  After expandation, it will be "\\*"
  #+NAME: no-name
  #+begin_src emacs-lisp
  "\\\\*"$0
  #+end_src

* yasnippet: make not indent automatically by set yas-indent-line to 'fixed in expand-env
  The default value is 'auto. Then after expanded it will indent the content
  (yas-expand-snippet "snippet" nil nil '((yas-indent-line 'auto)))

  If set (DEMO VERSION!) to 'fixed, then the content will be fixed on current column.

  The forth parameter is a list of (VAR VALUE), you can setup many variable to control some behavir


  You can also add a '$>' to the end of lines in a snippet content to do a forced indent, even when yas-indent-line is set to 'fixed.

  #+NAME: no-name
  #+begin_src emacs-lisp
  (yas-expand-snippet "snippet" nil nil '((yas-indent-line 'fixed)))
  #+end_src

* orgmode:regexp value: src block name (#+name: )
  #+NAME: no-name
  #+begin_src emacs-lisp
  org-babel-src-name-regexp 
  #+end_src
* orgmode: regexp value: src block (#+begin_src ... #+end_src)
  #+NAME: no-name
  #+begin_src emacs-lisp
  org-babel-src-block-regexp
  #+end_src


* list: concan lists by append, like the list.extend function in python
  All the arguments should be a list. 
  The new list's elements are te elements of all the arguments.

  Some examples:
  (append '(1 2)  '(3 4)) ;; => (1 2 3 4)
  (append '(1 2)  '(3 4) 5) ;; => (1 2 3 4 . 5)
  (append '(1 2)  5 '(3 4)) ;; => error: (wrong-type-argument sequencep 5)

  #+NAME: no-name
  #+begin_src emacs-lisp
  (append ${1:list} $0)
  #+end_src

* list: list and cons cell, car, cdr
  list is not the primitive data type. A primitive data type is cons cell.

  A cons cell is a pair, the first part is called its car, the second part cdr.
  It can be created by (cons CAR CDR).
  THe car and cdr are slots that could point to any other list object. They have the same properies and same concept.

  list is made by chaining many cons cells:
  1. so a list is a cons cell
  2. the car is the first element of that list
  3. the cdr point to the next cons cell

  true list: if and only if the cdr of the last cons cell of the list equals  to nil.
  dotted list: the cdr of the last cons cell of the list doesn't equal to nil.

  e.g.,
  (1 2) is a true list. Because its last cons cell is (2)(the list consists of two cons cells), and its cdr is nil
  (1 . 2) is not a dotted list. Because its last cons cell is (1 . 2)(yes, itself, because this list consistes of only one cons cell), and its (DEMO VERSION!) cdr is 2, which (DEMO VERSION!) is a number


  Form the above definition, a list is also a cons cell, whose cdr is also a cons cell if it is a true list. A cons cell is also a list. This is confusing. But if you understand the tow's relationship, you will know it.


  Reference: lisp info: Lists and Cons Cells


* regexp: string: match a regexp in sring. BUGGY, not use!!!
  string-match is buggy, nerver use it!!!  But use re-search-forward instead(first insert the string to a temp (DEMO VERSION!) buffer)
  #+NAME: no-name
  #+begin_src emacs-lisp
  (setq content "    aaa")
  ;; (setq content "aaa")
  (setq a 
        (when (string-match "^\s+" content)
          (match-string 0)))
  (setq b
        
        (with-temp-buffer (insert content) (goto-char 1)
                          (when (re-search-forward "^\s+" nil t)
                            (match-string 0)))
        )


  (message "%s|, %s|" a b)

  (string-match "^ " content)
  (string-match "^ " " aaa")

  (string-match "^\s+" " aaa")
  (match-string 0)
  (match-beginning 0)
  (match-end 0)
  #+end_src

* the cl package
** cl-loop usage
*** cl-loop: simply repeat man times
    Will print the message "hah" 10 times
    #+begin_src emacs-lisp
    (cl-loop repeat 10 do (message "Hah"))
    #+end_src

    It is equicilent to 'for x to 10', but without binding a variable to the counter
*** cl-loop: execute an action by the 'do' keywork
    If without the 'while (DEMO VERSION!) nil' part, then the loop will run for ever. So by default the cl-loop will loop forever.
    #+begin_src emacs-lisp
    (cl-loop do (message "hah") while nil)
    #+end_src

    #+RESULTS:
*** cl-loop: what happens if two 'for variables' have different length?
    If iterate in two for, and the count doens't match, the longer willl be ignored
    #+begin_src emacs-lisp
(cl-loop for x in '(1 2 3) for y in '(4 7 8 9) collect (list x y))
    #+end_src

    #+RESULTS:
    | 1 | 4 |
    | 2 | 7 |
    | 3 | 8 |
*** cl-loop: implement the python list comprehention syntax by keyword 'for','collect', and 'if'
    #+begin_src emacs-lisp
(cl-loop for x in '(1 2 3) if (cl-oddp x) collect x )
    #+end_src

    #+RESULTS:
    | 1 | 3 |


    So the list comprehention syntax in python is just a very simple case in cl-loop.
    cl-loop is powerful.
*** cl-loop: implement the do ... while statement in C
    #+begin_src emacs-lisp
(cl-loop with a = 0 do (message "a=%s" a) while (< a 3) do (incf a))
    #+end_src

    #+RESULTS:

    The order of do statement and the while statement can be arranged in any way.
    If put while before do, then it is while satetment in C.

*** cl-loop: the difference between while and when
    1. The syntax is differnet:
       while CONDITION
       when CONDITION FORMs
       
       when is a synanim of if

    2. 'while CONDITION' will terminate the loop, while 'when CONDITION FORMs' won't.
    

*** cl-loop:  check if values in a list are all true by keyword 'always'
    'always CONDITION' will terinate the loop immdeiately if CONDITION is nil, in this case the whole cl-loop expression evaluates to nil
    If all the CONDITIONS are t, then the whold (DEMO VERSION!) cl-loop expression evaluates to t
    #+begin_src emacs-lisp
(cl-loop for x in '(1 2 t) always x)
    #+end_src

    #+RESULTS:
    : t


    #+begin_src emacs-lisp :not-a-snippet
(cl-loop for x in '(1 nil t) always x)
    #+end_src

    #+RESULTS:

*** cl-loop: check if values in a list are all false/nil by keyword 'never'
    'never CONDITION' is the reverse of 'always CONDITION'
    #+begin_src emacs-lisp
(cl-loop for x in '(nil nil) never x)
    #+end_src

    #+RESULTS:
    : t

    
    #+begin_src emacs-lisp :not-a-snippet
(cl-loop for x in '(nil t) never x)
    #+end_src

    #+RESULTS:

*** cl-loop: multiple 'for' won't become nested 'for's, but (DEMO VERSION!) in parallel
    To nest loops, you should use multiply 'cl-loop' consturcts.

*** cl-loop: keywork 'for' examples
    #+begin_src emacs-lisp
(cl-loop for x from 1 to 10 collect x)
    #+end_src

    #+RESULTS:
    | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 |

    #+begin_src emacs-lisp
(cl-loop for x to 10 collect x)
    #+end_src

    #+RESULTS:
    | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 |

    #+begin_src emacs-lisp
(cl-loop for x below 10 collect x)
    #+end_src

    #+RESULTS:
    | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |

    #+begin_src emacs-lisp
(cl-loop for x upto 10 collect x)
    #+end_src

    #+RESULTS:
    | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 |

    #+begin_src emacs-lisp
(cl-loop for x in '(1 2 3) collect (* x x))
    #+end_src

    #+RESULTS:
    | 1 | 4 | 9 |


    Destructure
    #+begin_src emacs-lisp
(cl-loop for (x . y) in '((1 . 2) (4 . 5)) collect (list x y))
    #+end_src

    #+RESULTS:
    | 1 | 2 |
    | 4 | 5 |


    #+begin_src emacs-lisp
(cl-loop for (x  y) in '((1  2) (4  5)) collect (list x y))
    #+end_src

    #+RESULTS:
    | 1 | 2 |
    | 4 | 5 |



    #+begin_src emacs-lisp
(cl-loop for x in '(1 2 3) for y = (1+ x) collect (list x y))
    #+end_src

    #+RESULTS:
    | 1 | 2 |
    | 2 | 3 |
    | 3 | 4 |


    for var = FORM1 then FORM2: bind var to value of FORM1 for the first loop, and to value of FORM2 for the second and latter loops.
    If the 'then FORM2' part is not specified, then in every loop var will have value of FORM1.
    This syntax of 'for' won't terminate by itself.
    #+begin_src emacs-lisp
(cl-loop for x in '(1 2 3) for y = (1+ x) then (* x x) collect (list x y))
    #+end_src

    #+RESULTS:
    | 1 | 2 |
    | 2 | 4 |
    | 3 | 9 |


    Below won't terminate.
    #+begin_src emacs-lisp
(cl-loop for x = 1 collect x)
    #+end_src



    So functionality of keyword 'for': it will creates a variable and define what value in each loop it will ahve. In some syntaxs, the loop number (DEMO VERSION!) is fixed, while in others, (DEMO VERSION!) the loop is forever.

    When many 'for' is specified, they are not nested, but in paralell.
    
    If many 'for' are specified, they are not nessiarly be put one by one, but some other statements can be in between them. 
    #+begin_src emacs-lisp
    (cl-loop for x in '(1 2 3) do (incf x) collect (list  x)  for y = (1+ x) then (* x x) collect (list x y))
    #+end_src

    #+RESULTS:
    | 2 |    |
    | 2 |  3 |
    | 3 |    |
    | 3 |  9 |
    | 4 |    |
    | 4 | 16 |


    After understand the priciples, its seems quite clear to write 'for' statemment.

*** cl-loop: accumulate values by keyword 'collect', 'append', ..., count, sum, maximize
    'collect FORM' will put the value of FORM to the result list.
    'append FORM' will put the elements in the value of FORM, which should (DEMO VERSION!) be a list, to the result list.
    'ncons', 'concat', 'vconcat' do the similar things.

    'count FORM' will count the number of times when FORM is t
    'sum FORM' will sum all values of FORM
    'maximize FORM' (DEMO VERSION!) get the maximum value of FORM
    'minimize FORM'

*** cl-loop: exit the loop immediatelly and return a (DEMO VERSION!) value by keyword 'return'
    #+begin_src emacs-lisp
(cl-loop for x in '(1 2 3 4) when (> x 2) return x)
    #+end_src

    #+RESULTS:
    : 3


*** cl-loop: declare a variable by keyword 'with'

*** cl-loop: do a thing after the cl-loop finished by keyword 'finally'
    #+begin_src emacs-lisp
(cl-loop for x in '(1 2 3) finally (message "Done"))
    #+end_src

    #+RESULTS:
    : Done


    #+begin_src emacs-lisp
(cl-loop for x in '(1 2 3) do (message "x=%s" x) finally return x)
    #+end_src

    #+RESULTS:
    : 3

*** cl-loop: do a thing before the cl-loop started by keyword 'initially'
    #+begin_src emacs-lisp
(cl-loop initially (message "Starting...") for x in '(1 2  3)  if (> x 2) return x)
    #+end_src

    #+RESULTS:
    : 3

* write macro
  
** macro:
   Teh return value  of a macro call is a new code.
   Some part of the body of a macro is a code template, usually prefixed by a '`'. In the template, use the ',' to evaluate some symbols, use ',@' to evaluate a array and convert it to a flat list.

   The formal parmeters of a macro will be replaced with the real parameters if it is evaluate in the body.
   In this example, after expandation, ',name' will be replaced with what is passed in the parameter, and so as ',age'
   ',name' becomes "Jim", and ',age' becomes to aage, which is another symbol.
   #+begin_src emacs-lisp
   (defmacro atest (name age)
     `(message "%S %S" ,name ,age))

   (setq aage 10)
   (atest "Jim"  10)
   (macroexpand '(atest "Jim"  aage))
   #+end_src

   #+RESULTS:
   | message | %S %S | Jim | aage |

   
   In a macro body, if not quoted, (DEMO VERSION!) then the formal parameter will be replaced with the real parameter literally. This is the (DEMO VERSION!) key difference.
   The passed parameters are just symbols, instead of (DEMO VERSION!) its value.
   #+begin_src emacs-lisp
(defmacro for (var from init to final do &rest body)
(list var from init to final do body (symbolp from)))
(macroexpand '(for x from 0 to 10 do (+1 x)))
   #+end_src

   #+RESULTS:
   | x | from | 0 | to | 10 | do | ((1 x)) | t |

** macro: implement python list comprehension
   
   #+begin_src emacs-lisp
   (defmacro check-param-symbol-name (sym name)
     "Check if SYM is a symbol and its name is NAME"
     `(cl-assert (and (symbolp ,sym) (equal ,name (symbol-name ,sym))) nil "Expect keyword '%s', but get '%s'" ,name (if (symbolp ,sym) (symbol-name ,sym) ,sym)))

   (defmacro list-comp (action-form --for-- var --in-- alist &optional --if-- condition-form)
     (check-param-symbol-name --for-- "for")
     (check-param-symbol-name --in-- "in")
     (if --if--
         (progn (check-param-symbol-name --if-- "if")
                ;; here we should check condition-form is not nil
;; (message "%S, %S" (type-of condition-form) (symbolp condition-form))
                (cl-assert condition-form nil "Missing condition form for 'if'")
                `(cl-loop for ,var in ,alist when ,condition-form collect ,action-form))
       `(cl-loop for ,var in ,alist collect ,action-form)))

   (list-comp (* x x ) for x in '(1 2 3))

   (setq a '(1 2 3))
   (list-comp (* x x ) for x in a)

   (list-comp (* x x ) for x in a if (<  x 3))

   (list-comp (* x x ) for x in a if (< x 3))

   #+end_src

   #+RESULTS:
   | 1 | 4 |


   Note:
   - the real parameters including 'for', 'in', and 'if' are symbols within the macro body.
   - the acion-form will be a list within the macro body.
   - for an optional parameter, such as '--if--' in the example, its symbol-name will be "nil" if no real parameter is passed in.
     This is to say (symbol-name --if--) is "nil". What happens here (DEMO VERSION!) is:
     --if-- will first evalute to nil, because no real parameter is passed in.
     and (symbol-name 'nil) is "nil". (symbol-value nil) is nil. So nil is a symble whose value is itself, and name "nil".  So (symbol-name 'nil) and (symbol-name nil) is the same, becasuse evaluate nil is still  nil.
   - if the real parameter value for 'condition-form' is '(< x 3)', then withing the macro body, (type-of condition-form) is 'cons'. And '(message "%S" condition-form)' will output "(< x 3)". 
     so condition-form  is a list, and its value is "(< x 3)". The list won't be evaluated when called in the 'message' function.
     this is a little hard to understand.
     
     I guess (symbol-value 'condition-form) will be '(< x 3)' within the macro body.

     So its easier to understand the logics. 
     Teh formal parameter 'condition-form' get a real parameter of '(< x 3)' as its value, because the rela parameter is passed to a macro, so its will not be evaluated. So 'condition-form' will have a value exzatly the same as what is given in the argument list. Everything is the same as in a function call except the real parameter is not evaluated before passed in to the macro.
     
     The formal parameter '--for--' get a real parameter of 'for' as its value, which is a symbol. So '(type-of  --for--)' is 'symbol'. But the symbol's vlaue is void. This is just like:
     #+begin_src emacs-lisp
     (setq --for-- 'for)
     (message "%S, %S, %S" (type-of --for--) (symbolp --for--) (symbol-name --for--))
     (symbol-value '--for--) ;; --for-- not evaluated,  so its symbol-value is 'for'.
     (symbol-value --for--) ;; --for-- first evaluate to for, but symbol 'for' don't have a vlaue, so an error will be raised
     #+end_src

     Note: every char sequences are a symbol in lisp.
   - The formal parameters are symbols, and the real parameters will be symbol-value of those symbols.
   - (symbol-value 'foo): get the symbol value of symbol 'foo'
     (symbol-value foo):  get the symbol value of symbol value of symbol 'foo'



** macro: key differences between a function
   1. a macor's real parameters are not evaluated befored be passed in to the macro
      while a function's will first be evaluated and then be passed in
   2. the return value
      a macro's return value is a code that will be executed imediatelly, and the return value of the code will be the real return value of this macro after called.
      a function's return value is the real return value.
      
      
   common aspects:
   1. relationship between formal parameters and real parameters
      Within the macro or function body, the formal parameters are symbols whose value will be the real parameters.

   An example of parameter evaluation:
   #+begin_src emacs-lisp
   (defun foo(arg1 arg2)
     (format "arg1: %S, %S. arg2: %S, %S" arg1 (type-of arg1) arg2 (type-of arg2))
     ) 
   (defmacro foo2(arg1 arg2)
     (format "arg1: %S, %S. arg2: %S, %S" arg1 (type-of arg1) arg2 (type-of arg2))
     )

   (setq a "jim")
   (concat 
    (foo (+ 1 2) a)
    "\n"
    (foo2 (+ 1 2) a)
    "\n"
    (foo '(+ 1 2) 'a)
    "\n"
    (foo2 '(+ 1 2) 'a)
    )
   #+end_src

   #+RESULTS:
   : arg1: 3, integer. arg2: "jim", string
   : arg1: (+ 1 2), cons. arg2: a, symbol
   : arg1: (+ 1 2), cons. arg2: a, symbol
   : arg1: (quote (+ 1 2)), cons. arg2: (quote a), cons


   For function, real parameter for arg1 is first evaluated to a number 3, so arg1 is a number with value 3. real parameter for arg2 is from evaluated to a string "jim", so arg2 is a string with value "jim".
   For macro, arg1 is a list(cons) with value '(+ 1 2), and arg2 is a symbol 'a.
   And if we quote  the real parameter for a function, the result is the same as a macro. So the only differences is that if real parameter is evaluated before passed in.
   Line 4 is interesting. If we quote the real parameter of a macro, the quote will also go to the formal parameter. The reason here is 'quote is also a function, it evaluates to its input parameter

** only-once macro, some experiment.
   ``(,,c) is first `(,c), which is (b), and then `(,b), which is the (a). So the final result is (a). The result is (DEMO VERSION!) (list b), this is just equal to (a).
   So two `` are just like two ` chained. ` and , are paired.
   #+begin_src emacs-lisp :not-a-snippet
   (setq a "aa")
   (setq b 'a)
   (setq c 'b)
   (setq d 'c)
   (defmacro aa ()
     `(,c))
   (defmacro bb ()
     ``(,,c))
   (format "%S\n%S" (macroexpand '(aa))
           (macroexpand '(bb)))
   #+end_src

   #+RESULTS:
   : (b)
   : (list b)


   The above priciple 
   #+begin_src emacs-lisp :not-a-snippet
   (setq a "aa")
   (setq b '(a a))
   (setq c '(b))
   ;; (setq c 'b)
   (setq d 'c)
   (defmacro aa ()
     `,c)
   (defmacro aa2 ()
     `(,c))
   (defmacro bb ()
     `,@c)
   (defmacro bb2 ()
     `(,@c))
   (defmacro cc ()
     ``,,@c)
   (defmacro dd ()
     ``,@,c)
   (defmacro ee ()
     ``,@,@c)
   (format "%S\n%S\n%S\n%S\n%S\n%S\n%S" (macroexpand '(aa))
           (macroexpand '(aa2))
           (macroexpand '(bb))
           (macroexpand '(bb2))
           (macroexpand '(cc))
           (macroexpand '(dd))
           (macroexpand '(ee)))
   #+end_src

   #+RESULTS:
   : (b)
   : ((b))
   : (b)
   : (b)
   : b
   : (b)
   : b


   #+begin_src emacs-lisp :not-a-snippet
   (setq a "aa")
   (setq b 'a)
   (setq c '(b ))
   (setq d 'c)
   (defmacro aa ()
     `(symbolp `,b))
   (format "%S" (macroexpand '(aa)))
   #+end_src

   #+RESULTS:
   : (symbolp (\` (\, b)))


