
* add element to a list without change the list's address, destructively
#+begin_src emacs-lisp
(setcdr ${1:list} (append  (cdr 1) (list ${2:element})))
#+end_src

* write current buffer content to a file
#+begin_src emacs-lisp
(write-file ${1:file})
#+end_src

* set register contents given name, which is a character, such as ?Y, and contents
#+begin_src emacs-lisp
(set-register ?${1:name-char} ${2:contents})
#+end_src

* set multiple variables from list element, multiple-value-setq, cl
#+begin_src emacs-lisp
(multiple-value-setq
               (${1:var1} ${2:var2}) ${3:list})
#+end_src

* set a buffer to current buffer given name for editing, without selected
#+begin_src emacs-lisp
(set-buffer (get-buffer-create ${1:buffer-or-name}))
#+end_src

* restore to / set current mode to org-mode without automatically collapsed
#+begin_src emacs-lisp
(let (old-flag)
          (message "Change to org-mode")
          (setq old-flag org-inhibit-startup-visibility-stuff)
          ;; avoid org file automatically collapsed
          (setq org-inhibit-startup-visibility-stuff t)
          (org-mode)
          (setq org-inhibit-startup-visibility-stuff old-flag))


#+end_src

* replace in string with regexp
#+begin_src emacs-lisp
;; (replace-regexp-in-string "^\s*\\\\(.*\\\\)\s*$" "\\\\1" content)
(replace-regexp-in-string ${1:regexp} ${2:replacement} content)
#+end_src

* read a file content and insert to a buffer
#+begin_src emacs-lisp
(insert-file-contents ${1:file} nil nil nil t)
#+end_src

* method definition: get all source src blocks info given a org mode file, an entry pattern, a src block's name pattern
#+begin_src emacs-lisp
(defun aspk-get-all-src-blocks (file &optional name-pattern entry-pattern)
  "Get all src blocks of the given file name, return as a list. All src blocks should be in a entry, or there will be error. If the entry-pattern is provided, then only get that entry's src blocks. entry-pattern is regexp to match a headline "
  (let (tmp rst)
    ;; create temp buffer without undo record or font lock. (more efficient)
    ;; first space in temp buff name is necessary
    (and (get-buffer " myTemp") (kill-buffer " myTemp"))
    (set-buffer (get-buffer-create " myTemp"))
    (insert-file-contents file nil nil nil t)

    ;; get only the entry-pattern's content
    (when entry-pattern
      (goto-char 1)
      (if (re-search-forward entry-pattern nil t)
          (let ((heading (match-string 0))
                (entry (org-get-entry)))
            (erase-buffer)
            (insert heading)
            (insert "\n")
            (insert entry))
        (error "Entry-Pattern %S not found." entry-pattern)))

    ;; (write-file "aaa")
    (goto-char 1)
    (while (setq tmp (aspk-get-src-block-info name-pattern))
      (push tmp rst))
    (prog1 (reverse rst)
      (kill-buffer " myTemp"))))

(defun aspk-get-src-block-info (name-pattern)
  "Return a accoc list of block info, searching form current position, current buffer. If no src blocks, return nil, and position will not be moved.
The codes are copied form org-babel-find-named-block "
  (interactive "sName Pattern: ")
  (let* (
         ;; (name-pattern "\\(header\\|content\\)")
         (case-fold-search t)
         (regexp (concat org-babel-src-name-regexp name-pattern "[ \t(]*[\r\n]\\(?:^#.*[\r\n]\\)*"
                         (substring org-babel-src-block-regexp 1))))

    (when (re-search-forward regexp nil t)
      (append
       ;; position: beginning and end
       (list (cons 'beginning (match-beginning 0))
             (cons 'end (match-end 0)))
       ;; src block name, lang, content
       (let ((property-name '(nil name nil lang nil nil content)))
         (mapcar (lambda (idx)
                   (cons (nth idx property-name)
                         (if (equal (nth idx property-name) 'content)
                             (aspk-unquote-src-block-content
                              (substring-no-properties (or (match-string idx) "")))
                           (substring-no-properties (or (match-string idx) "")))))
                 '(1 3 6)))
       ;; belonging heading and level
       (save-excursion
         (let ((p (point)))
           (org-back-to-heading)
           (move-beginning-of-line 1)
           (if (re-search-forward "^\\(\\*+\\)\s+\\(.*\\)" p t)
               (list (cons 'level (length (match-string 1)))
                     (cons 'heading (substring-no-properties (match-string 2)))))))))))


(defun aspk-unquote-src-block-content (content)
  "Remove all leading ',' in each line of content"
  (replace-regexp-in-string "^\\(\s*\\)," "" content)) ;;remove all leading line helps indent.


#+end_src

* method definition: convert a list to a tree based on a level value in the list element
#+begin_src emacs-lisp
;; the input is a list of element, which is a list of cons, one of cons is ('level . N).
;; if an element's level is large than the previous element's level, then it is a child of that element.
;; After processing, two conses will be added to all element: ('parent . element) and ('children .  list-of-elemment). Note: the first element in childrean is a string, should be removed.
;; a test example:
;; (aspk-print-tree
;;  (aspk-convert-block-list-to-tree '(
;;                                     ((level . 1) (name . "A"))
;;                                     ((level . 2) (name . "B"))
;;                                     ((level . 3) (name . "B1"))
;;                                     ((level . 3) (name . "B2"))
;;                                     ((level . 2) (name . "C"))
;;                                     ))
;;  )

;; add a filed: leafp
(defun aspk-assoc (key list)
  (cdr (assoc key list)))


(defun aspk-print-tree (tree)
  ;; (message "Tree: %s" tree)
  (message "level: %s, name: %s"
           (aspk-assoc 'level tree)
           (aspk-assoc 'name tree))
  (mapc (lambda (tt)
          (if (listp tt)
              (aspk-print-tree tt))
          )
        (aspk-assoc 'children tree)))


(defun pns-convert-block-list-to-tree (mylist)

  "Covert a block list to a tree based on level. use the children and parent property"
  (let* ((elem nil)
         (idx 0)
         ;; below line will not work, the rst will change every time. Acturally, it will be the same value the last time run
         ;; (rst '((children . (a)) (parent . nil)))
         ;; this works though
         (rst (list (list 'children idx) (list 'parent)))

         ;; parents save the current level parent block
         (parents (list rst rst rst rst rst rst rst rst rst))
         (level nil)
         (parent nil) (children nil)
         )

    (tracel elem rst parents level parent children idx)

    (while mylist
      (setq elem (car mylist))
      (setq level (pns-assoc 'level elem))
      (setq parent (nth (- level 1) parents))
      (unless parent (error "parent for level %s nil" (- level 1)))

      ;; (message "level: %s, parent: %s" level parent)
      ;; add 'parent' and 'children' property to this elem, add saved it to (parents level)
      ;; (message "before elem: %s" elem)
      ;; (setq elem (append elem \`((children . (a)) ,(cons 'parent (list parent)))))
      (setq elem (append elem (list (list 'children (format "%s-%s" (incf idx) level))
                                    (list 'parent parent)
                                    )))
      ;; (message "after  elem: %s" elem)
      (setf (nth level parents) elem)

      ;; add this elem to parent as a child
      ;; both the above operations should be destructive.
      (setq children (pns-assoc 'children parent))
      ;; (message "before children: %S" children)
      (unless children (error "children nil. Parent: %S" parent))

      (setcdr children (append  (cdr children) (list elem)))
      ;; (message "after  children: %S" children)
      ;; (message "rst: %S" rst)
      ;; (cdr nil)

      (setq mylist (cdr mylist)))
    rst))



#+end_src

* kill a buffer it exists
#+begin_src emacs-lisp
(and (get-buffer ${1:buffer-or-name}) (kill-buffer $1))
#+end_src

* iterate on a list
#+begin_src emacs-lisp
(mapcar (lambda (elem)
          (message "Process elem %S" elem)
          $0
         )
        ${1:list})



#+end_src

* iterate all matched text in all files under a directory, given pattern regexp
#+begin_src emacs-lisp
(mapc (lambda (file)
        ;; (message "file=%s" file)
        (condition-case *error-info*
            (progn
              (and (get-buffer " myTemp") (kill-buffer " myTemp"))
              (set-buffer (get-buffer-create " myTemp"))
              (insert-file-contents file nil nil nil t))
          (error
           (message "Error happened: %S" *error-info*)
           (debug *error-info*)
           (list "Error: Fail to get snippet name. Error info below" *error-info*)))

        (goto-char (point-min))
            ;; (re-search-forward "^\s*#\s*name\s*:\s*\\\\(.*\\\\)" (point-max))
        (while (re-search-forward ${2:pattern} (point-max) t)
          (match-string 1)
          ;; here (match-string 1) is the matched text by first (), add processing codes here
          (message "Matched string %s" (match-string 1))
          $0

          )
        (kill-buffer " myTemp"))
      (f-files ${1:dir} nil t))
#+end_src

* iterate all file names under a directory, recursively, with an optional filter function
#+begin_src emacs-lisp
;; iterate all file names under directory ${1:dir} with an optional filter function, recursively
(require 'f)
(mapc (lambda (file)
      (message "File: %s" file) 
      ;; Here file is file name, add processing codes here
      )
   ;; the second parameter can be a function filtering the file names.
(f-files $1 nil ${2:recursivep$(yas-choose-value '("t" "nil"))}))
#+end_src

* helm other buffer
#+begin_src emacs-lisp
    (helm-other-buffer \`((name . "${1:name}")
                         (candidates . ${2:candidate})
                         (action . (lambda (cand)
                                     (message "Candidate %S" cand)
                                     $0
                                     )))
                       "$1")
#+end_src

* get value from assoc list given key
#+begin_src emacs-lisp
(cdr (assoc ${1:key} ${2:list}))
#+end_src

* get symbol / function from/given its name string
#+begin_src emacs-lisp
(intern ${1:function_string_name})
#+end_src

* get sub list, from n to last element, nthcdr, that is, remove the first n elements form a list
#+begin_src emacs-lisp
(nthcdr ${1:N} ${2:list})

#+end_src

* get source code block's mode in org mode file as string, for a local edit
#+begin_src emacs-lisp
(let (info (lang ""))
        (when (and (eq major-mode 'org-mode)
                   (fboundp 'org-edit-src-find-region-and-lang))
          (setq info (org-edit-src-find-region-and-lang)))

        (when info
          (setq lang (or (cdr (assoc (nth 2 info) org-src-lang-modes))
                         (nth 2 info)))
          (setq lang (if (symbolp lang) (symbol-name lang) lang))
          (setq lang-f (intern (concat lang "-mode")))
          )
          lang)

#+end_src

* get selected/region content as string, empty string if not active
#+begin_src emacs-lisp
(if mark-active (buffer-substring-no-properties (region-beginning) (region-end)) "")
#+end_src

* get register contents given name, which is a character, such as ?Y
#+begin_src emacs-lisp
(get-register ?${1:name-char})
#+end_src

* get or create a buffer given name
#+begin_src emacs-lisp
(get-buffer-create ${1:buffer-or-name})
#+end_src

* get nth element from a list
#+begin_src emacs-lisp
(nth ${1:idx} ${2:list})
#+end_src

* get input by read-string
#+begin_src emacs-lisp
(save-excursion (read-string ${1:prompt} nil nil ${2:default-value}))
#+end_src

* get file part of a full file name, delete the directory part
#+begin_src emacs-lisp
(file-name-nondirectory ${1:file-name})
#+end_src

* get file name from minibuffer, prompt for
#+begin_src emacs-lisp
(read-file-name "${1:File}: " nil nil nil ${2:default-file-name})
                                
#+end_src

* get directory part of a full file name, delete the file part
#+begin_src emacs-lisp
(replace-regexp-in-string "\\\\(.*[^/]+\\\\)/$" "\\\\1" (file-name-directory ${1:file-name}))
#+end_src

* get current src block mode name under cursor in a org mode file buffer
#+begin_src emacs-lisp
(lambda ()
  "get current src block mode name under cursor in a org mode file buffer. If not applicatable, return nil"
  (let (info lang)
    (when (and (eq major-mode 'org-mode) (fboundp 'org-edit-src-find-region-and-lang))
      (setq info (org-edit-src-find-region-and-lang)))
    (when info
      (setq lang (or (cdr (assoc (nth 2 info) org-src-lang-modes)) (nth 2 info)))
      (setq lang (if (symbolp lang) (symbol-name lang) lang))
      (setq lang-f (intern (concat lang "-mode"))))
    lang))
#+end_src

* get current major mode name as string, without the "-mode" suffix
#+begin_src emacs-lisp
(replace-regexp-in-string "-mode$" "" (format "%s"  major-mode)))
#+end_src

* get current date time as string, in a special format: year,month,day - hour,minute,seconds - microseconds
#+begin_src emacs-lisp
(format-time-string "%Y%m%d-%H%M%S-%3N")
#+end_src

* get current date time as list, in form of : (year month day hour minute seconds)
#+begin_src emacs-lisp
(nthcdr 3 (reverse (decode-time)))
#+end_src

* get all regular file names in a directory as a list, with an optional filter function
#+begin_src emacs-lisp
(progn (require 'f) (f-files ${1:dir} nil ${2:recursive-p}))
#+end_src

* get all emacs mode names as a list
#+begin_src emacs-lisp
'("c++" "c" "cc" "cmake" "csharp" "css" "emacs-lisp" "erlang" "html" "inf-ruby" "java" "javascript" "js" "js2" "js3" "jsp" "less-css" "lua" "nxml" "objc" "org" "perl" "python" "rhtml" "rspec" "ruby" "scala" "scss" "sh" "snippet" "web")
#+end_src

* get all directory names in a directory as a list, with an optional filter function
#+begin_src emacs-lisp
(progn (require 'f) (f-directories ${1:dir} nil ${2:recursive-p}))

#+end_src

* format string, change \n to newline character
#+begin_src emacs-lisp
(string-format "# -*- mode: snippet -*-\n#name : %s\n#contributor : %s\n# --\n%s")
#+end_src

* example: method: yas-expand-snippet, expand a snippet
#+begin_src emacs-lisp
(yas-expand-snippet "(message \\"\\`header\\`: \$1=%S\\" \${1:var})" (point) (point) '((yas-indent-line 'fixed) (header "DEBUG")))

#+end_src

* example: iterate on every element, child element recursively(treat the list as a tree), of a list, and convert all leaf to string
#+begin_src emacs-lisp
;; the depth is seems 2 or 3.
(defun pns-convert-to-string-filed (lst)
  (tracel lst)
  (mapcar (lambda (parameter)
            (if (listp parameter)
                (cons (format "%s" (car parameter))
                      (if (> (length (cdr parameter)) 1)
                          (pns-convert-to-string-filed (cdr parameter))
                        (format "%s" (car (cdr parameter)))))
              ;; for (name v1 v2 v3) cases. lst now is (v1 v2 v3)
              (format "%s" parameter)))
          lst))
#+end_src

* example: helm, multiple sources, the first source works like a default value
#+begin_src emacs-lisp
(helm-other-buffer
                        \`(((name . "Current mode")
                           (candidates . ;; (replace-regexp-in-string "^\(\s*\)," "" content)
                                       ,(list (replace-regexp-in-string "-mode$" "" (format "%s"  major-mode))))
                           (action . (lambda (c ) c))
                           (accept-empty . t))
                          ((name . "Which mode ?")
                           (candidates . ("org" "c" "java"))
                           (action . (lambda (c) c))
                           (accept-empty . t)))
                        "Which mode ")

#+end_src

* error handling: throw an error
#+begin_src emacs-lisp
(error "${1:msg}" $0)
#+end_src

* error, exception handling. try catch block in elisp. try: condition-case, catch: error, throw: error
#+begin_src emacs-lisp
(condition-case *error-info*
    ;; raise an error explicitly
    (progn 
      ;; (error "I am raised by error function explicitly")
      ;; body goes here. May raise an error, then will go to the error handler part
      $0
      )
  (error
    (message "Error happened: %S" *error-info*)
    ;; handler body goes here when error happens
    ))
      
#+end_src

* delete duplicate elements from a list, desctructively, and return it, by equal
#+begin_src emacs-lisp
(delete-dups ${1:list})
#+end_src

* create random number string, max length 16
#+begin_src emacs-lisp
;; create a number string with length ${1:16}
(replace-regexp-in-string " " "0" (format "%$1s" (random 10000000000000000)))
#+end_src

* create directory if not exists, recursively
#+begin_src emacs-lisp
(unless (file-exists-p ${1:dir}) (message "Creating dir: %s" $1) (mkdir $1 t))


#+end_src

* create a unique not existing random string file name in a directory
#+begin_src emacs-lisp
(lambda (dir)
  "Create a new file name under dir using the random number string method"
  (let ((not-found t) (file))
    (while not-found
      (setq file (replace-regexp-in-string " " "0" (format "%16s" (random 10000000000000000))))
      (unless (file-exists-p (format "%s/%s" dir file))
        (setq not-found nil)))
    (format "%s/%s" dir file)))
#+end_src

* create a unique not existing date time file name in a directory
#+begin_src emacs-lisp
(lambda (dir)
  "Create a new file name under dir using the current date time"
  (let ((not-found t) (file))
    (while not-found
      (setq file (format-time-string "%Y%m%d-%H%M%S-%3N"))

      (unless (file-exists-p (format "%s/%s" dir file))
        (setq not-found nil)))
    (format "%s/%s" dir file)))
#+end_src

* cre a buff
#+begin_src emacs-lisp

#+end_src

* cond: switch case in lisp, judge by string-equal
#+begin_src emacs-lisp
(cond ((string-equal ${1:var} "${2:value1}")
       $0
       )
      ((string-equal $1 "${2:value2}")
       )
      (t
      ))
#+end_src

* check if a function exists
#+begin_src emacs-lisp
(fboundp '${1:function-name})
#+end_src

* check if a buffer exists
#+begin_src emacs-lisp
(when (get-buffer ${1:buffer-or-name})
    (message "Buffer exists: %s" $1)
    $1
  )
#+end_src

* key binding enter key
#+begin_src emacs-lisp
(kbd "RET")
#+end_src

* setup/define key binding for a mode in a specific evil state, by use evil-define-key
#+begin_src emacs-lisp
;; Define key for evil normal state
(evil-define-key 'normal scb-mode-map (kbd "r") 'scb-redisplay-buffer)
(evil-define-key 'normal scb-mode-map (kbd "g") 'scb-goto-file)
(evil-define-key 'normal scb-mode-map (kbd "v") 'scb-view-file)
(evil-define-key 'normal scb-mode-map (kbd "t") 'toggle-truncate-lines)


#+end_src

* set proxy
#+begin_src emacs-lisp
(setq url-proxy-services '(("http" . "www.server.com:8080")))
#+end_src

* a function get current major mode name as string, without the "-mode" suffix, works for org mode src block
#+begin_src emacs-lisp
    (defun pns-get-current-mode ()
      "get current src block mode name under cursor in a org mode file buffer. If not applicatable, return nil"
      (or 
       (let (info lang)
         (when (and (eq major-mode 'org-mode) (fboundp 'org-edit-src-find-region-and-lang))
           (setq info (org-edit-src-find-region-and-lang)))
         (when info
           (setq lang (or (cdr (assoc (nth 2 info) org-src-lang-modes)) (nth 2 info)))
           (setq lang (if (symbolp lang) (symbol-name lang) lang)))
         lang)
       (replace-regexp-in-string "-mode$" "" (format "%s"  major-mode))))

#+end_src

* example: create a major mode for bnf syntax highlight
#+begin_src emacs-lisp
(define-generic-mode 'bnf-mode
  () ;; comment char: inapplicable because # must be at start of line
  nil ;; keywords
  '(
    ("^#.*" . 'font-lock-comment-face) ;; comments at start of line
    ("^[a-zA-Z0-9]*" . 'font-lock-function-name-face) ;; LHS nonterminals
    (".*" . 'font-lock-builtin-face) ;; other nonterminals
    ("::=" . 'font-lock-const-face) ;; "goes-to" symbol
    ("\|" . 'font-lock-warning-face) ;; "OR" symbol
    ("\{:\\|:\}" . 'font-lock-keyword-face) ;; special pybnf delimiters
   )
  '("\\.slif\\'" "\\.bnf\\'" "\\.pybnf\\'") ;; filename suffixes
  nil ;; extra function hooks
  "Major mode for BNF highlighting.")

#+end_src

* narrow to region, org capture
#+begin_src emacs-lisp
(defun org-capture-narrow (beg end)
  "Narrow, unless configuration says not to narrow."
  (unless (org-capture-get :unnarrowed)
    (narrow-to-region beg end)
    (goto-char beg)))


#+end_src

* add element to a list without change the list's address, destructively, by nconc
#+begin_src emacs-lisp
;; listb-or-element will be appended to lista. If listb-or-element is a list, then all elements of that element wille appended to lista. Lista will still have its original address.
;; (nconc a b c d): a, b, c all should be list, d can be a atom. The effect is:
;; 1. set last sublist of a's cdr(which is nil) to b;
;; 2. set last sublist of b's cdr(which is nil) to c;
;; 3. set last sublist of c's cdr(which is nil) to d;
;; So all three list a, b, c are altered.
;; (nconc a '3) will do the same thing, then its last sublist's cdr will be 3 insteadof a list. the next call to (nconc a b), 3 will be replaced by b.
(nconc ${1:lista} ${2:listb-or-element})
#+end_src

* example regexp
#+begin_src emacs-lisp
General rule:
Regexp in elisp is expressed by string. So the '\x' character will first be treated as a quote character in a string. With all quoted character processed, the result is the actual regexp.

string literal => string => regexp

;; to match a \ character in the target text, you should use "\\\\"
;; e.g
;; (replace-regexp-in-string "\\\\" "/" "\\a\\b")
;; because regexp is expressed in string, so a regexp "\\\\" is actually the /\\/ regexp in perl, which will match a \ character in target text.
;; Noted that 

;; match a \\`
;; (while (re-search-forward "\\\\\`" (point-max) t)
;;    (replace-match --random-string))


;; replace with \\`
(replace-match "\\\\\`"))


;; express \(, just use "\\(".


#+end_src

* iterate all matched text in current buffer after current position, given pattern regexp. with an replace action
#+begin_src emacs-lisp
(while (re-search-forward ${1:matching-regexp} (point-max) t)
           ;; here (match-string 1) is the matched text by first (), (match-string 0) is th whole matched data.
           ;; add processing codes here
           (message "Matched string %S" (match-string 0))
 
           ;; you can replace the matched text with another text
           ;; (replace-match replacement-text)
           )

#+end_src

* with given patterns/texts/regexp temporarily replaced/deleted/hidden from current buffer texts
#+begin_src emacs-lisp
(let ((--hidden-regexp ${1:regexp})
      (--random-string (replace-regexp-in-string " " "0" (format "%16s" (random 10000000000000000)))))
  ;; ensure --random-string not exists in the buffer
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward --random-string (point-max) t)
      (setq --random-string (replace-regexp-in-string " " "0" (format "%16s" (random 10000000000000000))))))
  ;; replace all --hidden-regexp to random-string temporarily
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward --hidden-regexp (point-max) t)
      (replace-match random-string)))

  ;; here all $1 are replaced to --random-string, add your processing codes here.
  $0

  ;; replace back
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward --random-string  (point-max) t)
      (--replace-match --hidden-regexp))))


#+end_src

* org mode show all cycle
#+begin_src emacs-lisp
(org-cycle 3)
#+end_src

* helm goto file line
#+begin_src emacs-lisp
(helm-goto-file-line ${1:line} "" ${2:file})
#+end_src

* get a value from a hash table given key
#+begin_src emacs-lisp
(gethash ${1:key} ${2:hash-table})
#+end_src

* put a key value pair to a hash table
#+begin_src emacs-lisp
(puthash ${1:key} ${2:vlaue} ${3:hash-table})
#+end_src

* create a hash table
#+begin_src emacs-lisp
(make-hash-table :test 'equal)
#+end_src

* check if a file is newer than another
#+begin_src emacs-lisp
;;return t if file1 is newer than file2
(file-newer-than-file-p ${1:file1} ${2:file2})
#+end_src

* get / read whole content of a file in one pass as string
#+begin_src emacs-lisp
(with-temp-buffer (insert-file-contents ${1:file}) (buffer-string))
#+end_src

* write dump save variable lists to a file, then after the file loaded, the variables loaded
#+begin_src emacs-lisp
;; http://stackoverflow.com/questions/2321904/elisp-how-to-save-data-in-a-file
(lambda (varlist filename)
  "simplistic dumping of variables in VARLIST to a file FILENAME"
  (save-excursion
    (let ((buf (find-file-noselect filename)))
      (set-buffer buf) (erase-buffer)
      ;; aspk-util-dump 
      (funcall
       (lambda (varlist buffer)
         "insert into buffer the setq statement to recreate the variables in VARLIST"
         (loop for var in varlist do
               (print (list 'setq var (list 'quote (symbol-value var))) buffer)))
       varlist buf)
      (save-buffer) (kill-buffer))))




#+end_src

* get file last modified time, the seconds since epoc
#+begin_src emacs-lisp
(time-to-seconds (nth 5 (file-attributes ${1:file} 'string)))
#+end_src
