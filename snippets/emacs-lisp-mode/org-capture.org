* org capture
** how it works:
   1. Use a buffer '*Capture*' to get the content of the template
      After get the template content(buffer string of that buffer), the buffer is killed and the content is returned.
      in org-capture-fill-template
      And then then content is stored in the :template property of org-capture-plist
      (org-capture-put :template (org-capture-fill-template))

   2. all data are stored in org-capture-plist
      by org-capture-put, to add property. org-capture-get, to get the property.

   3. 
      
   
** search for a headline in a org mode file, match exactly the headline, considering tags, TODO states
   #+begin_src emacs-lisp
   (defun bb ()
     (interactive)
     (let ((hd "Tasks"))
       (goto-char (point-min))
       (unless (derived-mode-p 'org-mode)
         (error
          "Target buffer \"%s\" for file+headline should be in Org mode"
          (current-buffer)))
       ;; (message "regexp: %s" (format org-complex-heading-regexp-format (regexp-quote hd)))
       (if (re-search-forward
            (format org-complex-heading-regexp-format (regexp-quote hd))
            nil t)
           (goto-char (point-at-bol))
         (message "head not found"))))

   #+end_src

   #+RESULTS:
   : bb


   goto the end of this subtree, or the next entry if reversed is true.

   #+begin_src emacs-lisp
      (if reversed
          (progn
            (outline-next-heading)
            (or (bolp) (insert "\n")))
        (org-end-of-subtree t nil)
        (or (bolp) (insert "\n")))))

   #+end_src

  
** make a indirect buffer:
   An indirect buffer is a mirror of another buffer.
   Any (DEMO VERSION!) operations done in a indirect buffer has the same effect as if they are done in the base buffer.
   Org capture make use of this feature. And then narrow to the new entry area.o

   Another possible application of an indirect buffer is to display different part of a file in another window. (But it seems this can be done just by using the orignial buffer)
   #+begin_src emacs-lisp
   ;; (defun org-capture-get-indirect-buffer (&optional buffer prefix)
   (defun aspk-get-indirect-buffer (&optional buffer prefix)
     "Make an indirect buffer for a capture process.
   Use PREFIX as a prefix for the name of the indirect buffer."
     (setq buffer (or buffer (current-buffer)))
     (let ((n 1) (base (buffer-name buffer)) bname)
       (setq bname (concat prefix "-" base))
       (while (buffer-live-p (get-buffer bname))
         (setq bname (concat prefix "-" (number-to-string (incf n)) "-" base)))
       (condition-case nil
           (make-indirect-buffer buffer bname 'clone)
         (error
          (let ((buf (make-indirect-buffer buffer bname)))
            (with-current-buffer buf (org-mode))
            buf)))))

   #+end_src

   #+RESULTS:
   : aspk-get-indirect-buffer

   #+begin_src emacs-lisp
(setq aspk-buffer (aspk-get-indirect-buffer nil "ASPK"))
   #+end_src

   #+RESULTS:
   : #<buffer ASPK-2-inbox.org>

** org-paste-subtree: paste a sub tree to current pos, determin the level automatically
   The first parameter is level, if nil then determine level based on the previous and next levels.

   #+begin_src emacs-lisp
   (defun aa()
     (interactive)
     (let ((template "***** bbaaaa\n  bbbb"))
       (org-paste-subtree nil template t))) 
   #+end_src

   #+RESULTS:
   : aa

** how to use it to capture a code snippet
   This is a template to add org entry to the todo.org file, under "Tasks" headline
   ("t" "Todo" entry
  (file+headline
   (concat org-directory "/todo.org")
   "Tasks")
  "* TODO %?\n  %i\n  %a")

  Explation of the above template:
  "t": the key. Use to select this template
  "Todo": the description. Will be displaied when selecting
  entry: type. this is an org mode file entry
  (file+headline (concat ...) "Tasks"): target. Where the new item should be placed.
    Can also be a funtion:
                 (function function-finding-location)
                Most general way, write your own function to find both
                file and location

  "* TODO %?\n....": template. The templete of this entry.
    Can also be a function:
                 (function function-returning-the-template)
    Then the template will be generated dynamically by this function.


   So to capture a code snippet, we can just write a function to generate the template dynamically. The target we can use (file+headline), because we will always put the new snippets to all-mode/inbox.org


   Hatch code:

   a function to create template.
   #+begin_src emacs-lisp
   (defun pns-create-a-snippet ()
     (let ((lang (pns-get-current-mode))
           (region-str (if mark-active (buffer-substring-no-properties (region-beginning) (region-end)) "")))
       (format "* %%^{Title}\n  %%U\n  #+begin_src %s\n%s%%?\n  #+end_src\n  %%F\n\n"
               lang
               (if (equal region-str "")
                   "  "
                 ;; delete empty lines in beginning and end of region-str
                 (setq region-str (replace-regexp-in-string "^[ \t\n]*\\(.*\\)[ \t\n]*$" "\\1" region-str))
                 (pns-indent-src-code-string region-str lang 2)))))
   #+end_src

   #+RESULTS:
   : pns-create-a-snippet

   Note:
   - use "%?" to place cursor
   - %^{prompt} to prompt for a sring
   - %U: inactive time date stamp
   - %i: region value

   - %F: file full name

   - Use helm to get the title form all existing titles. And if we select an existing title, maybe the 'target' should just be that entry. So we should use a function to find the target. 
     It seems template fucntion is first called, then target. So this is possible.


   #+RESULTS:
   : pns-create-a-snippet


   a capture template element:
   #+begin_src emacs-lisp
      (setq pns-org-capture-template
            '("-" "PNS" entry
              (file+headline
               "~/project/aspk-new-snippet/snippets/all-mode/inbox.org"
               "Captured")
              (function pns-create-a-snippet)
              :empty-lines-before 1
              )) 
   #+end_src

   #+RESULTS:
   | - | PNS | entry | (file+headline ~/project/aspk-new-snippet/snippets/all-mode/inbox.org Captured) | (function pns-create-a-snippet) | :empty-lines-before | 1 |



   Add the template to org-capture-templates
   #+begin_src emacs-lisp
(add-to-list 'org-capture-templates pns-org-capture-template)
   #+end_src

   #+RESULTS:
   | - | PNS               | entry | (file+headline ~/project/aspk-new-snippet/snippets/all-mode/inbox.org Captured) | (function pns-create-a-snippet)                     | :empty-lines-before | 1 |
   | t | Todo              | entry | (file+headline (concat org-directory /todo.org) Tasks)                          | * TODO %?\n  %U\n  %i\n  %a                         |                     |   |
   | a | Appt              | entry | (file+headline (concat org-directory /todo.org) Appt)                           | * %^{Appt}\n  %^T%? \n %a                           |                     |   |
   | h | Howto             | entry | (file+headline  Howto)                                                          | * %^{Title}\n  %U\n\n  %? \n  ======\n%i\n  %a \n   |                     |   |
   | e | Experience & Tips | entry | (file+headline  Experience & Tips)                                              | * %^{Title}\n  %U\n\n  %? \n  ======\n  %i\n  %a \n |                     |   |
   | l | English learning  | entry | (file+headline  English learning)                                               | * %^{Title}\n  %?                                   |                     |   |
   | w | Web development   | entry | (file+headline (concat org-directory /webdev.org) Random notes)                 | * %^{Title}\n  %U\n  %?                             |                     |   |
   | m | Misc              | entry | (file+headline  Miscellaneous)                                                  | * %^{Title}\n  %U\n  %i\n\n  %?                     |                     |   |
   | p | Perl              | entry | (file+headline (concat org-directory /perl.org) Random notes)                   | * %^{Title}\n  %U\n  %?                             |                     |   |
   | j | Journal           | entry | (file+datetree (concat org-directory /journal.org))                             | * %^{Title}\n  %U\n  %? \n\n  %a\n                  |                     |   |




   #+begin_src emacs-lisp
   (defun pns-indent-src-code-string (code-str lang nindent) 
     "CODE-STR is the src code, LANG is like emacs-lisp, NINDENT is the number of spaces be put at the begining of each line"
     (with-temp-buffer
       (insert code-str)
       (let ((indent (make-string nindent ?\ ))
             (mode-func (intern (concat lang "-mode"))))
         (funcall mode-func)
         (indent-buffer)
         (goto-char (point-min))
         (while (re-search-forward "\\(^\\).+" nil t)
           (replace-match indent nil nil nil 1)))
       (buffer-string)))
   #+end_src

   #+RESULTS:
   : pns-indent-src-code-string
