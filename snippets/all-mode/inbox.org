* a test of aall mode
  #+begin_src python :results output
  python
  #+end_src

  #+begin_src emacs-lisp :results output
  elisp
  #+end_src
* Captured
** org-capture: function to place a template
   [2019-02-07 Thu 20:13]
   #+begin_src emacs-lisp
               (org-capture-place-template
                (equal (car (org-capture-get :target)) 'function))  
   
   #+end_src
** get base buffer of an indirect buffer, check if a buffer is indirect one
  [2019-02-07 Thu 20:15]
  #+begin_src emacs-lisp
(buffer-base-buffer (current-buffer))  
  
  #+end_src
** get buffer name as string
  [2019-02-07 Thu 20:16]
  #+begin_src emacs-lisp
(buffer-name)  
  
  #+end_src
** check if a mode is derived from another mode
  [2019-02-07 Thu 20:17]
  #+begin_src emacs-lisp
(derived-mode-p 'org-mode)  
  
  #+end_src
** a function to put new values to a property list
  [2019-02-07 Thu 21:10]
  A property list is (PROP1 VALUE1 PROP2 VALUE2 ...)
  The return value of plist-put is the new plist. The original (DEMO VERSION!) plist is not changed. 
  #+begin_src emacs-lisp
(defun org-capture-put (&rest stuff)
  "Add properties to the capture property list 'org-capture-plist'."
  (while stuff
    (setq org-capture-plist (plist-put org-capture-plist
                                       (pop stuff) (pop stuff)))))  
  
  #+end_src
** a function to get property list key value
  [2019-02-07 Thu 21:13]
  #+begin_src emacs-lisp
  (defun org-capture-get (prop &optional local)
    (plist-get (if local org-capture-current-plist org-capture-plist) prop))  

  #+end_src
** get buffer substring
  [2019-02-07 Thu 21:20]
  #+begin_src emacs-lisp
(buffer-substring (point) (mark)))  
  
  #+end_src
  /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/org/org-capture.el.gz
** check if current point is at begining of line
  [2019-02-07 Thu 21:28]
  #+begin_src emacs-lisp
(bolp)  
  #+end_src
  /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/org/org-capture.el.gz
** make sure point is at the beginning of line. If not, insert a new line
  [2019-02-07 Thu 21:28]
  #+begin_src emacs-lisp
(or (bolp) (newline))  
  #+end_src
  /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/org/org-capture.el.gz
** orgmode: move point to the begining of the previous heading line
  [2019-02-07 Thu 21:32]
  #+begin_src emacs-lisp
(org-back-to-heading)
  #+end_src
  /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/org/org-capture.el.gz
** ignore error: run a function / expression and ignore the errro
  [2019-02-07 Thu 21:34]
  If error happens, then return nil. and if no error, return the return value of the function
  #+begin_src emacs-lisp
(ignore-errors (org-back-to-heading))
  #+end_src
  /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/org/org-capture.el.gz
** call a function interactively form source code
  [2019-02-07 Thu 21:38]
  #+begin_src emacs-lisp
(call-interactively 'org-refile))
  #+end_src
  /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/org/org-capture.el.gz
** orgmode: move an entry to another headling
  [2019-02-07 Thu 21:40]
  The target is in org-refile-targets
  #+begin_src org
(org-refile)
  #+end_src
  /Users/astropeak/project/aspk-new-snippet/snippets/all-mode/inbox.org
** make a buffer current for editing operations without display it, like with-current-buffer
  [2019-02-07 Thu 21:43]
  Ususaly called in code. The setting exist after the current command exit. 
  The differences to (DEMO VERSION!) with-current-buffer:
  set-buffer takes effect accross functions, but with-current-buffer 
  #+begin_src emacs-lisp
(set-buffer "*scratch*")
(goto-char (point-max))
(insert "AAA\n")
  #+end_src

  #+RESULTS:

  /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/org/org-capture.el.gz
** not narrow, widen, exit narrow
  [2019-02-07 Thu 21:48]
  #+begin_src emacs-lisp
(widen)
  #+end_src
  /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/org/org-capture.el.gz
** orgmode: check if point is at a heading / headling
  [2019-02-07 Thu 21:52]
  #+begin_src emacs-lisp
(org-at-heading-p)
  #+end_src
  /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/org/org-capture.el.gz
** orgmode: move point to the begining of the next headline /heading
  [2019-02-07 Thu 21:55]
  #+begin_src emacs-lisp
(outline-next-heading)
  #+end_src
  /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/org/org-capture.el.gz
** orgmode: get headline level, point must be at the beginning of a headline
   [2019-02-07 Thu 21:58]
   If point is not at the beginning of a headline, return nil
   #+begin_src emacs-lisp
       (and (bolp) (looking-at "\\*+") (- (match-end 0) (match-beginning 0)))
   #+end_src
   /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/org/org-capture.el.gz
** orgmode: increase entry/headline level, considering org-odd-levels-only
  [2019-02-07 Thu 22:02]
  #+begin_src emacs-lisp
(org-get-valid-level `current-level` `change`)
  #+end_src
  /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/org/org-capture.el.gz

  
** orgmode: move point to the end of the subtree
  [2019-02-07 Thu 22:06]
  INVISIBLE-OK TO-HEADING
  if TO-HEADING is t, then will go to the next heading after the end of the subtree.

  outline-next-heading will go to (DEMO VERSION!) the next heading, what ever its level.
  #+begin_src emacs-lisp
(org-end-of-subtree nil nil)
  #+end_src
  /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/org/org-capture.el.gz
** delete the content in buffer, given two point
  [2019-02-07 Thu 22:15]
  #+begin_src emacs-lisp
(delete-region `start` `end`)
  #+end_src
  /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/org/org-capture.el.gz
** insert before point n empty lines, make  sure there are only n empty lines before point
   [2019-02-07 Thu 22:17]
   #+begin_src emacs-lisp
   (let ((pos (point)))
     (org-back-over-empty-lines)
     (delete-region (point) pos)
     (if (> `n` 0) (newline `n`)))
   #+end_src
   /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/org/org-capture.el.gz

** skip chars backward, move point bckward and stop after a non specified char
  [2019-02-08 Fri 10:08]
  This will skip back all white spaces.
  chanrs are just like the inside of [] in regexp
  Return value is the moved position.
  
  This can't be achieved by re-search-backward, which will put the the point before the non specified char
  #+begin_src emacs-lisp
(skip-chars-backward " \t\n")
  #+end_src
  /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/org/org-capture.el.gz

** check if point is in an org mode plain list item, return the beginning pos of the list or nil
  [2019-02-08 Fri 10:13]
  #+begin_src emacs-lisp
(org-in-item-p)
  #+end_src
  /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/org/org-capture.el.gz

** orgmode: insert a new plain list item if point is in a item
  [2019-02-08 Fri 10:16]
  #+begin_src emacs-lisp
(org-insert-item)
  #+end_src
  /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/org/org-capture.el.gz

** get the point / position of the last char of (DEMO VERSION!) this line
  [2019-02-08 Fri 10:17]
  #+begin_src emacs-lisp
(point-at-eol)
  #+end_src
  /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/org/org-capture.el.gz

** delete / remove the maximum common spaces / indentation of all lines in a string
  [2019-02-08 Fri 10:19]
  #+begin_src emacs-lisp
(org-remove-indentation `string`)
  #+end_src
  /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/org/org-capture.el.gz


  #+begin_src emacs-lisp :not-a-snippet
  (setq s "    a\n           b")
  (org-remove-indentation s)
  #+end_src

  #+RESULTS:
  : a
  :        b

** get current column number
  [2019-02-08 Fri 10:33]
  #+begin_src emacs-lisp
(current-column))
  #+end_src
  /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/org/org-src.el.gz

** add an indention / spaces at the beginning of each line of the buffer
   [2019-02-08 Fri 10:36]
   #+begin_src emacs-lisp
   (let ((indent (make-string `total-nindent` ?\ )))
     (goto-char (point-min))
     (while (re-search-forward "\\\\(^\\\\).+" nil t)
       (replace-match indent nil nil nil 1))))
   #+end_src
   /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/org/org-src.el.gz

** a function to indent source block content
   #+begin_src emacs-lisp
   (defun aa (code-str lang nindent) 
     (with-temp-buffer
       (insert code-str)
       (let ((indent (make-string nindent ?\ ))
             (mode-func (intern (concat lang "-mode"))))
         (funcall mode-func)
         (indent-buffer)
         (goto-char (point-min))
         (while (re-search-forward "\\(^\\).+" nil t)
           (replace-match indent nil nil nil 1)))
       (buffer-string)))
   #+end_src

   #+RESULTS:
   : aa


   #+begin_src emacs-lisp :not-a-snippet
   (setq s "(newline)\n    (goto-char (point-min))")
   (aa s "emacs-lisp" 1)
   #+end_src

   #+RESULTS:
   :  (newline)
   :  (goto-char (point-min))

** orgmode:  check if a string is a valid tree
   [2019-02-08 Fri 11:16]
   #+begin_src emacs-lisp
   (org-kill-is-subtree-p tree)
   #+end_src
   /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/org/org-capture.el.gz

** get the clip board content of the system
   [2019-02-08 Fri 11:18]
   #+begin_src emacs-lisp
   (org-get-x-clipboard 'PRIMARY)
   (org-get-x-clipboard 'CLIPBOARD)
   (org-get-x-clipboard 'SECONDARY)
   #+end_src
   /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/org/org-capture.el.gz

** delete all other buffers
   [2019-02-08 Fri 11:19]
   #+begin_src emacs-lisp
   (delete-other-windows)
   #+end_src
   /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/org/org-capture.el.gz

** insert a file content to buffer after point
   [2019-02-08 Fri 11:21]
   #+begin_src emacs-lisp
   (insert-file-contents filename)
   #+end_src
   /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/org/org-capture.el.gz

** move point to beginning of line
   [2019-02-08 Fri 16:22]
   #+begin_src emacs-lisp
   (beginning-of-line)
   #+end_src
   /Users/astropeak/Dropbox/org/todo.org

** move point to end of line
   [2019-02-08 Fri 16:23]
   #+begin_src emacs-lisp
   (end-of-line)
   #+end_src
   /Users/astropeak/Dropbox/org/todo.org

** mark the region between current point to given point
   [2019-02-08 Fri 16:23]
   The third parameter make the region active.. Also see set-mark, mark-ring
   #+begin_src emacs-lisp
   (push-mark `point` nil t)
   #+end_src
   /Users/astropeak/Dropbox/org/todo.org

** get current mark point
   [2019-02-08 Fri 16:50]
   #+begin_src emacs-lisp
   (mark t)
   #+end_src
   /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/simple.el.gz

** repeat / re-run last command by 'repeat
   [2019-02-08 Fri 19:34]
   bind to evil leader "mm"
   The last-command variable saves the name of last command.
   #+begin_src emacs-lisp
   (repeat)
   #+end_src
   /Users/astropeak/Dropbox/org/todo.org

** do a syntax passing at current postion
   [2019-02-09 Sat 20:35]
   #+begin_src emacs-lisp
   (syntax-ppss)
   #+end_src
   /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/emacs-lisp/lisp.el.gz

** check if current point is in string
   [2019-02-09 Sat 20:36]
   #+begin_src emacs-lisp
   (nth 3 (syntax-ppss))
   #+end_src
   /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/emacs-lisp/lisp.el.gz

** get the beginning position / point of the current comment or the string, nil if not in 
   [2019-02-09 Sat 20:37]
   #+begin_src emacs-lisp
   (nth 8 (syntax-ppss))
   #+end_src
   /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/emacs-lisp/lisp.el.gz

** get the beginning and end position/point of a string if current point is in one, else nil
   [2019-02-09 Sat 21:43]
   (nth 3 syntax) is true: current point is in a string
   (nth 8 syntax): the beginning position of the current string or comment.
   #+begin_src emacs-lisp
   (let ((syntax (syntax-ppss)))
     (when (nth 3 syntax)
       (cons (nth 8 syntax)
             (save-excursion
               (goto-char (nth 8 syntax))
               (forward-sexp 1)
               (point)))))
   #+end_src
   /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/emacs-lisp/lisp.el.gz
** get the beginning and end position/point of a comment if current point is in one, else nil
   [2019-02-09 Sat 21:43]
   (nth 3 syntax) is true: current point is in a string
   (nth 8 syntax): the beginning position of the current string or comment.
   #+begin_src emacs-lisp
   (let ((syntax (syntax-ppss)))
     (when (and (nth 8 syntax) (not (nth 3 syntax)))
       (cons (nth 8 syntax)
             (save-excursion
               (goto-char (nth 8 syntax))
               (forward-comment 9999)
               (skip-chars-backward " \t\n")   
               (end-of-line)
               (point)))))
   #+end_src
   /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/emacs-lisp/lisp.el.gz

** move point forward following syntax
   [2019-02-09 Sat 22:04]
   #+begin_src python
   (skip-syntax-forward "/\\")
   #+end_src
   /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/paren.el.gz

** throw / raise / signal an error
   [2019-02-09 Sat 22:30]
   #+begin_src emacs-lisp
   (signal 'error-symbol "error data")
   #+end_src
   /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/emacs-lisp/lisp.el.gz

** try...except/catch: handle error by condition-case
   [2019-02-09 Sat 22:31]
   error-symbol can also be a (DEMO VERSION!) list, don't need to be (DEMO VERSION!) quoted.
   #+begin_src emacs-lisp
   (condition-case err
       $0
     (error-symbol error-handler-forms)
     (error-symbol-2 error-handler-forms-2)
     )
   #+end_src
   /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/emacs-lisp/lisp.el.gz

   An example:
   #+begin_src emacs-lisp :not-a-snippet
   (condition-case err
       (scan-lists (point) 1 1)
     (scan-error (message "Scan error: %S" err))
     )
   #+end_src

   #+RESULTS:
   : Scan error: (scan-error "Unbalanced parentheses" 13692 13817)

** move point to the end of a comment, by forward-comment
   [2019-02-09 Sat 22:40]
   #+begin_src emacs-lisp
   (forward-comment 1)
   #+end_src
   /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/emacs-lisp/lisp.el.gz

** save restriction: restore narrow, widen status after executed codes
   [2019-02-09 Sat 22:42]
   #+begin_src emacs-lisp
   (save-restriction $0)
   #+end_src
   /usr/local/Cellar/emacs/25.3/share/emacs/25.3/lisp/emacs-lisp/lisp.el.gz

** check if an object is a string
   [2019-02-09 Sat 23:09]
   #+begin_src emacs-lisp
   (stringp `obj`)
   #+end_src
   /Users/astropeak/org/todo.org

** literate programming org file template
   [2019-02-10 Sun 11:38]
   #+begin_src org
   ,* code & doc
   ,** export source code
      run 'org-babel-tangle' to generate the .el file.
      
      ,#+name: sources
      ,#+begin_src emacs-lisp :noweb yes :tangle `(file-name-base (buffer-file-name))`.el
      <<vars>>

      <<methods>>

      <<misc>>

      <<init>>

      <<keybindings>>

      (provide `(file-name-base (buffer-file-name))`)
      ,#+end_src

      $0

   ,* issues
   #+end_src
   /Users/astropeak/project/aspk-emacs-package/aspk-select-thing.org

** test embeded elisp code
   #+begin_src org
   File full name: `(buffer-file-name)`
   File base name: `(file-name-base (buffer-file-name))`
   Age: `age 10`
   Grade: `  grade 10`
   #+end_src

** get the base name of a file name, file-name-base
   [2019-02-10 Sun 17:42]
   #+begin_src org
   (file-name-base (buffer-file-name))
   #+end_src
   /Users/astropeak/project/aspk-new-snippet/snippets/all-mode/inbox.org

** display all overlays in current buffer
   [2019-02-10 Sun 20:05]
   #+begin_src emacs-lisp
   (defun aspk-show-all-overlays ()
(interactive)
(cl-loop for ov being the overlays collect ov do (message "ov: %S" ov)))
   #+end_src

   #+RESULTS:
   : aspk-show-all-overlays

   /Users/astropeak/project/aspk-new-snippet/pns.el
** get all ascii chars as a list
   #+begin_src emacs-lisp
   (cl-loop for i from ?\x0 to ?\xff collect i)
   #+end_src

   #+RESULTS:
   | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 | 123 | 124 | 125 | 126 | 127 | 128 | 129 | 130 | 131 | 132 | 133 | 134 | 135 | 136 | 137 | 138 | 139 | 140 | 141 | 142 | 143 | 144 | 145 | 146 | 147 | 148 | 149 | 150 | 151 | 152 | 153 | 154 | 155 | 156 | 157 | 158 | 159 | 160 | 161 | 162 | 163 | 164 | 165 | 166 | 167 | 168 | 169 | 170 | 171 | 172 | 173 | 174 | 175 | 176 | 177 | 178 | 179 | 180 | 181 | 182 | 183 | 184 | 185 | 186 | 187 | 188 | 189 | 190 | 191 | 192 | 193 | 194 | 195 | 196 | 197 | 198 | 199 | 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207 | 208 | 209 | 210 | 211 | 212 | 213 | 214 | 215 | 216 | 217 | 218 | 219 | 220 | 221 | 222 | 223 | 224 | 225 | 226 | 227 | 228 | 229 | 230 | 231 | 232 | 233 | 234 | 235 | 236 | 237 | 238 | 239 | 240 | 241 | 242 | 243 | 244 | 245 | 246 | 247 | 248 | 249 | 250 | 251 | 252 | 253 | 254 | 255 |

** char literal by hex number: ?\xFF
   #+begin_src emacs-lisp
   ?\x`hex code`
   #+end_src

   ref: https://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Char-Syntax.html
   Other special charaters:
     ?\a ⇒ 7                 ; control-g, C-g
     ?\b ⇒ 8                 ; backspace, <BS>, C-h
     ?\t ⇒ 9                 ; tab, <TAB>, C-i
     ?\n ⇒ 10                ; newline, C-j
     ?\v ⇒ 11                ; vertical tab, C-k
     ?\f ⇒ 12                ; formfeed character, C-l
     ?\r ⇒ 13                ; carriage return, <RET>, C-m
     ?\e ⇒ 27                ; escape character, <ESC>, C-[
     ?\s ⇒ 32                ; space character, <SPC>
     ?\\ ⇒ 92                ; backslash character, \
     ?\d ⇒ 127               ; delete character, <DEL>

     
** keybinding: define a default handler command for all keys not in a key map, by [t]
   This is used in ace-jump-mode:
   (define-key map [t] 'ace-jump-done)

   #+begin_src emacs-lisp
   (define-key map [t] `command`)
   #+end_src

** keybinding: remap an command, by [remap command]
   Remap kill-line to my-homemade-kill-line
   #+begin_src emacs-lisp
   (define-key (current-global-map) [remap kill-line] 'my-homemade-kill-line)
   #+end_src

** keymap lookup order: only text
   #+begin_src emacs-lisp
   Emacs will look for keys in a certain order, and that order I have described below. Keep in mind that only active keymaps are used, and that the order is top-to-bottom; the first “match” is used, subject to criteria that we don’t care about.

   overriding-terminal-local-map for terminal-specific key binds.
   overriding-local-map for keys that should override all other local keymaps. Be VERY careful if you use this!
   Keymap char property at point: for keymaps that are local to the character point is at. This is used for stuff like fields in yasnippet and the customize dialog.
   emulation-mode-map-alists for advanced multi-mode keymap management
   minor-mode-overriding-map-alist for overriding the keymaps used by minor modes in major modes.
   minor-mode-map-alist is exactly like the overriding version above, but the preferred means of specifying the keymaps for minor modes.
   Keymap text property at point: is like the one above for char properties but is for text properties only.
   current-local-map for keymaps defined in the buffers’ current local map
   current-global-map is the last place Emacs will look for key binds and it is for the global ones.
   #+end_src


   
** try to use the overriding-local-map
   #+begin_src emacs-lisp
   (defun aa ()
     (interactive)
     (setq overriding-local-map (make-keymap))
     ;; (define-key overriding-local-map (kbd "i") (lambda () (interactive) (setq overriding-local-map nil)))
     (define-key overriding-local-map (kbd "C-g") (lambda () (interactive) (setq overriding-local-map nil)))
     (define-key overriding-local-map [t] (lambda () (interactive)(message "aaaaa")))
     )

   (defun bb()
     (interactive)
     (setq overriding-local-map nil))
   #+end_src

   #+RESULTS:
   : bb

** get the current pressed key as string
   In function of undefined
   #+begin_src emacs-lisp
   (key-description (this-single-command-keys))
   #+end_src

   
** keymaps
   #+begin_src emacs-lisp
(setq m (make-keymap))
(define-key m (kbd "i") 'undefined)
(car m)
(setq c (car(cdr m)))
(assert (eq (aref c ?i) 'undefined))
(assert (eq (aref c ?a) 'undefined))
(char-table-subtype c)
(get 'keymap 'char-table-extra-slots)

(symbol-plist 'keymap)
;; (aref "abcd" 4)

   #+end_src

** get the nth char/element in a string, index start from 0, by aref
   aref can also be used to get the element of vector, string, char-table, bool-vector, which are all arrayes.

   #+begin_src emacs-lisp
   (aref `str` `idx`)
   #+end_src

** get the nth element of an array, by aref
   #+begin_src emacs-lisp
   (aref `array` `idx`)
   #+end_src

** set the nth element of an array, by aset
   #+begin_src emacs-lisp
   (aset `array` `idx` `value`)
   #+end_src

** char-table
*** make a char-table: an array indexed by a char
    parameter is a subtype
    #+begin_src emacs-lisp
    (make-char-table 'aaa)
    #+end_src

    The subtype is a symbol. It is used to tell what's this char-table is used for. For example, a keymap is a char-table with 'keymap as subtype.

** symbol
*** symbol properties
    Ref: https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Properties.html#Symbol-Properties

    A symbol can have many properties, which are used to store miscellaneous information about the symbol.
    One application of symbol properties is using it to record the number of extra slots in a char-table, by this char-table's subtype(which is the 'keymap symbol) 's char-table-extra-slots property.
    ref: https://www.gnu.org/software/emacs/manual/html_node/elisp/Char_002dTables.html
    
    #+name: get one property
    #+begin_src emacs-lisp
    (get `symbol` `property`)
    #+end_src

    #+name: get the property list of the symbol
    #+begin_src emacs-lisp
    (symbol-plist `symbol`)
    #+end_src

    one example:
    #+begin_src emacs-lisp :not-a-snippet
    (get 'keymap 'char-table-extra-slots)
    (symbol-plist 'keymap)
    ;; (setq keymap "aaa")
    ;; (symbol-value 'keymap)
    #+end_src




#+begin_src emacs-lisp :not-a-snippet
(symbol-plist aa)

#+end_src
** the differences of '(lambda) and (lambda)
   They are the same, because from the doc of 'lambda', evaluating the lambda expression is the expression itself.
   #+begin_src emacs-lisp
(setq a '(lambda ()))
(setq b (lambda ()))
(equal a  b)
(type-of a)
(type-of b)
   #+end_src

** comment a region
   [2019-02-11 Mon 17:58]
   #+begin_src emacs-lisp
   (comment-region beg end)
   #+end_src
   /Users/astropeak/OneDrive/Dropbox/project/emacs.d/site-lisp/evil-nerd-commenter/evil-nerd-commenter.el

** a function to check if a module name can be imported
   [2019-02-12 Tue 11:57]
   #+begin_src python
   def is_importable(module_name):
     import importlib
     try:
       mod = importlib.import_module(module_name)
       return True
     except ImportError:
       return False
   #+end_src
   /Users/astropeak/V/embed3_model_base/amo/scripts/a.py

** xbat completion
   Source the file 
   #+begin_src sh
   # xbat completion
   #

   _parselist()
   {
           xbat list | tail -n +2 | sed 's/ .*//' | awk '{if($1 != "") print $1}'
   }

   _xbat()
   {
       local cur prev commands options command pname

       COMPREPLY=()

       command=${COMP_WORDS[1]}
       prev=${COMP_WORDS[COMP_CWORD-1]}
       cur=${COMP_WORDS[COMP_CWORD]}

       commands='list repo run'
           
       if [[ $COMP_CWORD -eq 1 ]] ; then
           COMPREPLY=( $( compgen -W "$commands" -- $cur ) )
           else
               if [[ $prev == 'run' ]]; then
                   options=`_parselist`
                   COMPREPLY=( $( compgen -W "$options" -- $cur ) )
               elif [[ $prev == 'repo' ]]; then
                   COMPREPLY=( $( compgen -W "$commands" -- $cur ) )
               fi
           fi
       return 0
   }
   complete -F _xbat xbat
   complete -F _xbat xbat.exe

   #+end_src

** a function: create directory recursively
   https://stackoverflow.com/questions/600268/mkdir-p-functionality-in-python

   #+begin_src python :results output
   import errno    
   import os

   def mkdir_p(path):
       try:
           os.makedirs(path)
       except OSError as exc:  # Python >2.5
           if exc.errno == errno.EEXIST and os.path.isdir(path):
               pass
           else:
               raise
   #+end_src

** zsh newline char
   [2019-06-11 Tue 14:50]
   #+begin_src emacs-lisp
   NEWLINE=$'\n'
   PROMPT="firstline${NEWLINE}secondline "
   #+end_src
   /Users/astropeak/project/aspk-new-snippet/pns.el

** check if file is grepable
   [2019-06-11 Tue 14:51]
   #+begin_src sh
   grep "${1:-.*}" >/dev/null && grep ...
   #+end_src
   /Users/astropeak/github/kaldi/egs/timit/s5/RESULTS

** redirect stderr to null
   [2019-06-11 Tue 14:52]
   #+begin_src sh
   2>/dev/null
   #+end_src


** redirect stderr to stdout
   [2019-06-11 Tue 14:52]
   #+begin_src sh
   2>&1
   #+end_src

** zsh prompt setup
   [2019-06-11 Tue 14:53]
   #+begin_src fundamental
   function prompt_char {
   if [ $UID -eq 0 ]; then echo "#"; else echo $; fi
   }NEWLINE=$'\n'
   # NEWLINE=
   PROMPT='%![Error: (void-function !.%{$fg_bold)]%m %{$fg_bold[blue]%}%![Error: (void-function !.%1~.%~)] $(git_prompt_info)%_${NEWLINE}$(prompt_char)%{$reset_color%} 'ZSH_THEME_GIT_PROMPT_PREFIX="("
   ZSH_THEME_GIT_PROMPT_SUFFIX=") "
   #+end_src
   /Users/astropeak/.oh-my-zsh/themes/gentoo.zsh-theme

** check if a package/feature is installed/loaded
   [2019-06-11 Tue 15:01]
   #+begin_src emacs-lisp
   (featurep '${1:package-name})
   #+end_src
   /Users/astropeak/project/aspk-new-snippet/pns.org

** define key in the evil leader map for a function
   [2019-06-11 Tue 15:05]
   #+begin_src emacs-lisp
   (when (featurep 'evil-leader)
     (evil-leader/set-key "s" 'pns-expand-template-by-name))
   #+end_src
   /Users/astropeak/project/aspk-new-snippet/pns.org

** generate random number
   [2019-06-12 Wed 14:36]
   https://docs.python.org/2/library/random.html

   #+begin_src python
   from random import randint
   # Return a random integer N such that a <= N <= b.
   random.randint(a, b)
   #+end_src

   #+RESULTS:

   /Users/astropeak/tmp/1.py

** execute shell command, by os.system
   [2019-06-14 Fri 16:12]
   This way is simpler than the subprocess way
   #+begin_src python
   os.system(`cmd`)
   #+end_src
   /Users/astropeak/project/tools/onedrive_confilict.py

** check input parameter numbers / counts
   [2019-06-15 Sat 11:44]
   #+begin_src sh
   if [ "$#" -ne 1 ]; then
       echo "Please call '$0 dir' to run this command!"
       exit 1
   fi
   #+end_src
   /Users/astropeak/project/tools/kaldi_build.sh

** get the directory where this script is in
   [2019-06-15 Sat 12:03]
   $0 is the first value in shell command
   if the shell command is run by bash script_file.sh, this still works.
   $0 is the same thing as __file__ in python
   This makes it possiable to call other scripts in the same folder.

   #+begin_src sh
   BASEDIR=$(dirname "\$0")
   #+end_src
   /Users/astropeak/project/tools/kaldi/clone_and_first_time_build.sh

** for loop
   [2019-06-26 Wed 11:19]
   #+begin_src sh
   for var in low high vocon4 vocon5
   do
       echo $var
   done
   #+end_src

** a variable stores current directory
   [2019-06-26 Wed 14:34]
   #+begin_src emacs-lisp
   default-directory
   #+end_src
   /Users/astropeak/project/aspk-new-snippet/pns.org

** get current script file name at run time, regardless whether the script is executed by load or eval buffer
   [2019-06-26 Wed 15:18]
   ref: http://ergoemacs.org/emacs/elisp_relative_path.html

   Explanation: If user ran your script by eval-buffer, then load-file-name's value would be nil. So, using both {load-file-name, buffer-file-name } is a good way to get the script name regardless whether the script is executed by load or eval buffer.
   #+begin_src emacs-lisp
   (or load-file-name buffer-file-name)
   #+end_src
   /Users/astropeak/project/aspk-new-snippet/pns.org

** locate-domination-file: a function to find directory recursively(upwordsly) that contains a file name, starting from a file name
   [2019-06-26 Wed 15:24]
   This function is usful to search for a certern file upwordly through the file hirachy.
   #+begin_src emacs-lisp
   (locate-dominating-file FILE NAME)
   #+end_src
   /Users/astropeak/project/aspk-new-snippet/pns.org

** check if a file / directory exist
   [2019-07-05 Fri 16:16]
   #+begin_src emacs-lisp
   (file-exists-p `file-or-dir`)
   #+end_src
   c:/Users/fuqiang.luo/OneDrive/Dropbox/project/emacs.d/init.el

** argparse argument group
   [2019-07-16 Tue 15:14]
   #+begin_src python
   import argparse
   parser = argparse.ArgumentParser(add_help=True)
   group1 = parser.add_argument_group('From config file')
   group1.add_argument('-c', dest='configFile', help='config file')
   group1.add_argument('--steps', dest='steps', help='steps')
   group1.add_argument('params', nargs='*', help='params')group2 = parser.add_argument_group('From python file')

   group2.add_argument('-s', dest='pythonFile', help='python file')
   # parser.print_help()
   args = parser.parse_args()
   #+end_src
   /Users/astropeak/tmp/4.py

** argparse mutually exclusive group
   [2019-07-16 Tue 15:16]
   #+begin_src python
   import argparse
   parser = argparse.ArgumentParser(prog='PROG')
   group = parser.add_mutually_exclusive_group()
   group.add_argument('--foo', action='store_true')
   group.add_argument('--bar', action='store_false')
   parser.parse_args()
   #+end_src
   /Users/astropeak/tmp/3.py

** argparse: suppress(do not show) the help message of a arg, by help=argparse.SUPPRESS
   [2019-07-19 Fri 11:48]
   #+begin_src python
   parser = argparse.ArgumentParser(prog='frobble')
   parser.add_argument('--foo', help=argparse.SUPPRESS)
   parser.print_help()

   # usage: frobble [-h]

   # optional arguments:
   #   -h, --help  show this help message and exit
   #+end_src
   c:/Users/fuqiang.luo/OneDrive/Dropbox/org/nuance/status.org

   
** argparse: the code to add a help argument(-h, --help)
   https://github.com/python/cpython/blob/3.7/Lib/argparse.py

   #+begin_src python :results output
   # add a -h arg and don't show its message in the help doc
   parser = argparse.ArgumentParser(description='xxxx', add_help=False)
   parser.add_argument('-h', '--help', action='help',  help=argparse.SUPPRESS)

   # the code copied from argparser.py
   # add help argument if necessary
   # (using explicit default to override global argument_default)
     default_prefix = '-' if '-' in prefix_chars else prefix_chars[0]
     if self.add_help:
       self.add_argument(
         default_prefix+'h', default_prefix*2+'help',
         action='help', default=SUPPRESS,
         help=_('show this help message and exit'))

   #+end_src

** get the file name / directory of perl script that is running, by $0
   [2019-07-24 Wed 10:12]
   ref: https://stackoverflow.com/questions/4600192/how-to-get-the-name-of-perl-script-that-is-running
   #+begin_src perl
   use File::Basename;
   my \$name = dirname(\$0);
   # my \$name = dirname(__FILE__);
   print \$name, "\n"
   #+end_src

   #+RESULTS:


** use lib: add a relative local lib directory / path to @INC
   [2019-07-24 Wed 10:33]
   Ref: http://blog.sina.com.cn/s/blog_3fe961ae0102vikm.html
   There are two ways to add a directory to lib path:
   1. set PERL5LIB
   2. by 'use lib DIR'

   And we can get the directory of a perl script by 'dirname(__FILE__)', so if the lib directory is realtive to the script, we can get it.


   Below code will add the lib subdirectory which is in the same directory of the running perl script to lib path.
   #+begin_src perl
   use File::Basename;
   use lib dirname(__FILE__) . "/lib";
   #+end_src
   /Users/astropeak/project/aspk-new-snippet/snippets/all-mode/inbox.org

** robot framework: rerun failed test cases
   [2019-07-25 Thu 14:45]
   Ref: http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#executing-test-cases
   #+begin_src sh
   robot --rerunfailed output.xml .
   #+end_src
   /Users/astropeak/1.sh

** python get file basename without extension
   [2019-07-05 Fri 02:59]
   #+begin_src python
   os.path.splitext(os.path.basename(`filename`))[0]
   #+end_src

** xargs:  -J standard input text symbol
   [2019-08-06 Tue 22:26]
   The symbol following -J is the symbol that represent the standard input. 
   This works on mac
   #+begin_src sh
   xargs -J % cp -a % .
   #+end_src
   /Users/astropeak/1.sh

** find: the -size +1M option: only file files that larger than a size
   [2019-08-06 Tue 22:27]
   #+begin_src sh
   find .. -type f -name '*.jpg' -size +1M
   #+end_src
   /Users/astropeak/1.sh

** get file's modification time: os.path.getmtime, return as a float
   [2019-08-07 Wed 09:28]
   #+begin_src python
   os.path.getmtime(`file`)
   #+end_src

** get file's creation time: os.path.getctime, return as a float
   [2019-08-07 Wed 09:28]
   #+begin_src python
   os.path.getctime(`file`)
   #+end_src

** ensure/create unique file name by adding a suffix if file already exists
   [2019-08-07 Wed 10:14]
   #+begin_src python
   def ensure_unique_file_name(filename):
     suffix = 2
     while os.path.isfile(filename):
       a = os.path.splitext(filename)
       filename = '%s_%s%s' % (a[0], suffix, a[1])
       suffix += 1

     return filename
   #+end_src
   /Volumes/SDB/files/b.py

** move/rename file
   [2019-08-07 Wed 10:20]
   #+begin_src python
   os.rename(src, dst)
   #+end_src
   /Volumes/SDB/files/b.py

** check if file exists
   [2019-08-07 Wed 10:20]
   #+begin_src python
   os.path.isfile(`file`)
   #+end_src
   /Volumes/SDB/files/b.py

** rename file name to it's modification time
   [2019-08-07 Wed 10:21]
   #+begin_src python
   import datetime
   import os
   mtime = os.path.getmtime(`file`)
   dt = datetime.datetime.utcfromtimestamp(mtime)
   s = dt.strftime("%y%m%d_%H%M%S")
   ext = os.path.splitext(`file`)[1]
   new_file_name = os.path.join(os.path.dirname(`file`), s + ext)
   #+end_src
   /Volumes/SDB/files/b.py

** get the extention/suffix of a file name, including the dot
   the first element is the other part
   [2019-08-07 Wed 10:27]
   #+begin_src python
   os.path.splitext(`filename`)[1]
   #+end_src
   /Volumes/SDB/files/c.py

** multiple line string, just enclose the string in a quote
   [2019-08-14 Wed 11:34]
   #+begin_src sh
   text="this is line one
   this is line two
   this is line three"
   #+end_src
   /Users/astropeak/1.sh

** bash prompt
   [2019-08-14 Wed 11:38]
   #+begin_src sh
   export PS1='[$(whoami)@\h \w] \n> '
   #+end_src

ref: https://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html

\a : an ASCII bell character (07)
\d : the date in “Weekday Month Date” format (e.g., “Tue May 26”)
\D{format} :	the format is passed to strftime(3) and the result is inserted into the prompt string; an empty format results in a locale-specific time representation. The braces are required
\e : an ASCII escape character (033)
\h : the hostname up to the first ‘.’
\H : the hostname
\j : the number of jobs currently managed by the shell
\l : the basename of the shellâ€™s terminal device name
\n : newline
\r : carriage return
\s : the name of the shell, the basename of $0 (the portion following the final slash)
\t : the current time in 24-hour HH:MM:SS format
\T : the current time in 12-hour HH:MM:SS format
\@ : the current time in 12-hour am/pm format
\A : the current time in 24-hour HH:MM format
\u : the username of the current user
\v : the version of bash (e.g., 2.00)
\V : the release of bash, version + patch level (e.g., 2.00.0)
\w : the current working directory, with $HOME abbreviated with a tilde
\W : the basename of the current working directory, with $HOME abbreviated with a tilde
\! : the history number of this command
\# : the command number of this command
\$ : if the effective UID is 0, a #, otherwise a $
\nnn : the character corresponding to the octal number nnn
\\ : a backslash
\[ : begin a sequence of non-printing characters, which could be used to embed a terminal control sequence into the prompt
\] : end a sequence of non-printing characters

** flush stdout
   [2019-08-15 Thu 21:32]
   #+begin_src python
   import sys
   sys.stdout.flush()
   #+end_src

** argparse: add a flag option that don't accept any value by setting action to 'store_true'
   [2019-08-17 Sat 21:29]
   The default action is 'store'.
   The 'store_ture' action will set the the value if the '-r' option is given, otherwise false.
   So the default value will be false.
   The 'store_ture' is a special case of 'store_const', with the const set to True.
   Similarly , there is 'store_false' action.
   #+begin_src python
   parser.add_argument('-r', dest='is_directory', action='store_true', help='recursive copy')
   #+end_src
   /Users/astropeak/bin/nuance_scp.py

** argparse: defines the possible values for an argument by setting the choices arg
   [2019-08-17 Sat 21:34]
   #+begin_src python
   parser.add_argument('-d', dest='direction', default='to', choices=['from', 'to'], help='direction, default is to')
   #+end_src
   /Users/astropeak/bin/nuance_scp.py

** raise not implemented erro
   [2019-08-17 Sat 21:44]
   #+begin_src python
   raise NotImplementedError
   #+end_src
** assert statement: assert expression[, error-str]
   [2019-07-29 Mon 23:45]
   assert(expression)
   assert expression[, error-str]

   But not
   assert(expression[, error-str])
   #+begin_src python
   assert type == 'step', 'Only step type is supported now'
   #+end_src

** shuffle a list
   [2019-07-30 Tue 21:31]
   #+begin_src python
   import random
   random.shuffle(`list-variable-name`)
   #+end_src

** create a directory if not exists
   [2019-07-30 Tue 21:37]
   #+begin_src python
   if not os.path.exists(`directory-name`):
     os.makedirs(`directory-name`)
   #+end_src

** write a unicode string to a file
   [2019-07-30 Tue 21:39]
   #+begin_src python
   with open(`filename`, 'wt') as f:
     f.write(`unicode-str`.encode('utf8'))
   #+end_src

** shabang #!: sharp bang
   [2019-07-30 Tue 21:41]
   #+begin_src python
   #!/usr/bin/env python
   #+end_src

** encoding declaration comment to utf-8
   [2019-07-30 Tue 21:43]
   #+begin_src python
   # -*- encoding: utf-8 -*-
   #+end_src

** open file as unicode string
   [2019-07-30 Tue 21:45]
   #+begin_src python
   import codecs
   f = codecs.open(`filename`, 'r', '`file-encoding "utf-8"`')
   #+end_src

** run a process with a timeout by the 'timeout' command
   [2019-08-26 Mon 08:50]
   https://stackoverflow.com/questions/10224939/how-to-run-a-process-with-a-timeout-in-bash
   #+begin_src sh
   timeout 15s <COMMAND>
   #+end_src
   /Users/astropeak/tmp/1.sh

** run a process with a timeout, on Mac
   https://unix.stackexchange.com/questions/58304/is-there-a-way-to-call-a-command-with-a-set-time-limit-and-kill-it-when-that-tim
   Run is by : timeout 2 'sleep 5'
   #+begin_src sh
   timeout() {

       time=$1

       # start the command in a subshell to avoid problem with pipes
       # (spawn accepts one command)
       command="/bin/sh -c \"$2\""

       expect -c "set echo \"-noecho\"; set timeout $time; spawn -noecho $command; expect timeout { exit 1 } eof { exit 0 }"    

       if [ $? = 1 ] ; then
           echo "Timeout after ${time} seconds"
       fi

   }
   #+end_src

** a program that show how to use while and case statement
   [2019-08-26 Mon 08:55]
   #+begin_src sh
   #!/bin/bash
   # Purpose: Display various options to operator using menus
   # Author: Vivek Gite < vivek @ nixcraft . com > under GPL v2.0+
   # ---------------------------------------------------------------------------
   # capture CTRL+C, CTRL+Z and quit singles using the trap
   trap '' SIGINT
   trap ''  SIGQUIT
   trap '' SIGTSTP

   # display message and pause
   pause(){
       local m="$@"
       echo "$m"
       read -p "Press [Enter] key to continue..." key
   }
    
   # set an 
   while :
   do
       # show menu
       clear
       echo "---------------------------------"
       echo "       M A I N - M E N U"
       echo "---------------------------------"
       echo "1. Show current date/time"
       echo "2. Show what users are doing"
       echo "3. Show top memory & cpu eating process"
       echo "4. Show network stats"
       echo "5. Exit"
       echo "---------------------------------"
       read -r -p "Enter your choice [1-5] : " c
       # take action
       case $c in
           1) pause "$(date)";;
           2) w| less;;
           3) echo '*** Top 10 Memory eating process:'; ps -auxf | sort -nr -k 4 | head -10; 
              echo; echo '*** Top 10 CPU eating process:';ps -auxf | sort -nr -k 3 | head -10; 
              echo;  pause;;
           4) netstat -s | less;;
           5) break;;
           ,*) Pause "Select between 1 to 5 only"
       esac
   done
   #+end_src
   /Users/astropeak/tmp/1.sh

** infinite loop by while statement
   [2019-08-26 Mon 08:57]
   #+begin_src sh
   # Recommend syntax for setting an infinite while loop
   while :
   do
       echo "Do something; hit [CTRL+C] to stop!"
   done
   #+end_src
   /Users/astropeak/tmp/1.sh

** ps show all process
   [2019-08-26 Mon 08:58]
   #+begin_src sh
   ps -efl 
   #+end_src
   /Users/astropeak/tmp/1.sh

** find user's UID GID group by the 'id' command
   [2019-08-26 Mon 09:00]
   #+begin_src sh
   id
   #+end_src
   /Users/astropeak/tmp/1.sh

** example: get all processes by psutil sorted by memory
   [2019-08-26 Mon 09:01]
   #+begin_src python
   import psutil
   def getListOfProcessSortedByMemory():
       '''
       Get list of running process sorted by Memory Usage
       '''
       listOfProcObjects = []
       # Iterate over the list
       for proc in psutil.process_iter():
          try:
              # Fetch process details as dict
              pinfo = proc.as_dict(attrs=['pid', 'name', 'username'])
              pinfo['vms'] = proc.memory_info().vms / (1024 * 1024)
              # Append dict to list
              listOfProcObjects.append(pinfo);
          except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
              pass
    
       # Sort list of dict by key vms i.e. memory usage
       listOfProcObjects = sorted(listOfProcObjects, key=lambda procObj: procObj['vms'], reverse=True)
    
       return listOfProcObjects
   #+end_src
   /Users/astropeak/tmp/1.py

** get current buffer file name(by buffer-file-name variable)
   [2019-09-06 Fri 10:06]
   #+begin_src emacs-lisp
   buffer-file-name
   #+end_src

** a function to get current buffer file name, with user directory replaced with ~
  [2019-09-06 Fri 10:07]
  #+begin_src emacs-lisp

  (defun aspk-get-current-buffer-file-name ()
    (replace-regexp-in-string (getenv "HOME") "~" buffer-file-name))

  #+end_src
  c:/Users/fuqiang.luo/OneDrive/Dropbox/project/emacs.d/lisp/init-aspk.el

** real / true file name: file-truename, follow symbolic links
   [2019-09-06 Fri 11:16]
   #+begin_src org
    (file-truename `file`)
   #+end_src

** expand file name: expand-file-name, something like change relative file name to absolution file name
   [2019-09-06 Fri 11:21]

   https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Name-Expansion.html

   #+file ~/OneDrive/Dropbox/project/aspk-new-snippet/pns.org:1128
   #+begin_src emacs-lisp
   (expand-file-name "foo")
   #+end_src

** current  directory of buffer: default-directory
  [2019-09-06 Fri 11:26]

  #+file ~/OneDrive/Dropbox/project/aspk-new-snippet/pns.org:1123
  #+begin_src elisp
  default-directory
  #+end_src

** screenrc: show a caption under the window to show current window name
   [2019-09-06 Fri 12:07]

   #+file ~/tmp/1.sh:1
   #+begin_src sh
   caption always "%{= kw}%-w%{= kG}%{+b}[%n %t]%{-b}%{= kw}%+w %=%d %M %0c %{g}%H%{-}"
   vbell off
   #+end_src

** string trim / strip, by s-trim
   [2019-09-08 Sun 10:22]

   #+file ~/project/aspk-new-snippet/pns.org:1145
   #+begin_src emacs-lisp
   (s-trim region-str)
   #+end_src

** get file name base name, non directory part
   [2019-09-08 Sun 10:23]

   #+file ~/project/emacs.d/lisp/init-aspk.el:60
   #+begin_src emacs-lisp
   (file-name-nondirectory `file`)
   #+end_src

** get file name base name, non directory part and extention
   [2019-09-08 Sun 10:24]

   #+file ~/project/emacs.d/lisp/init-aspk.el:8
   #+begin_src emacs-lisp
   (file-name-base `file`)
   #+end_src
