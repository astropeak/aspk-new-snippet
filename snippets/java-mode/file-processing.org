* process files with buffer and channel, nio package
  #+name: content
  #+begin_src java
  @(vars (for  (read "Input") (write "Output")))
  #+end_src
** import needed package
   #+name: content
   #+begin_src java
   import java.io.*;
   import java.nio.*;
   import java.nio.channels.*;
   #+end_src
   
** create channel
   #+name: content
   #+begin_src java
    {
        File`for`Stream fs = null;
        try {
            fs = new File`for`Stream(`file-name`);
            FileChannel fc = fs.getChannel();

            $0
        } catch (FileNotFoundException ex) {
            System.out.println(ex);
        } catch (IOException ex) {
            System.out.println(ex);
        } finally {
            try {
                if (fs != null) {fs.close();}
            } catch (IOException e) {
                System.out.println(e);
            }
        }
    }
   #+end_src
** create buffer
   The vars annotation defines variables. have this form: @(vars var1 var2 ...), or @(var (var1 value11 value12) var2 (var3 (value31-display value31-real) var32)). It will create new variables and prompt the user for value. But if a env passed as parameter already given the variable a value, then it will just use this value. This fixed the expand this snippet directly or by parent problem.
   An entry  is just like a function. @vars annotation defines local variable. It get value by two methods:
   1. if no parameter given to this snippet, the it will prompt the user for value
   2. else it will get value from the paremeter.
   Definition: a parameter is a list of cons of (var-name . var-value). it is similar a parameter to a functon call.
   
   #+name: content
   #+begin_src java
   @(vars (type Byte Char Int Short Char Long Float Double))
   @(vars (method allocate allocateDirect wrap))
   @(get type method)
   #+end_src
   
*** create buffer by allocate or direct-allocate
    TODO: here a confilict. Before we checking the precondition, we need method variable's value. Before we getting method's value, we need the preconditon checking passed.
    =>Maybe fixed by define another syntax: @(get var1 var2 ...), used for getting values, first from env, then from end user. `var value` syntax is just a syntax suger for three syntax: @(vars (var value)), @(get var), and `var`(this is used by  yasnippet).
    
    #+name: content
    #+begin_src java
    @(if (method allocate allocateDirect))
    `type`Buffer buffer = `type`Buffer.`method`(`size 1024`);
    #+end_src
    
*** create buffer by wrap
    #+name: content
    #+begin_src java
    @(if (method wrap))
    `type`Buffer buffer = `type`Buffer.wrap(`array-name`);
    #+end_src
    
** read from channel to buffer
   #+name: content
   #+begin_src java
   @(if (for read))
   buffer.clear();
   while (fc.read(buffer) != -1) {
       // process buffer content here
       $0
       buffer.clear();
   }
   #+end_src
   
** extract buffer content
   #+name: content
   #+begin_src java
   @(if (for read))
   //now file contents saved in buffer, add process codes here
   buffer.flip();
   int i=0;
   while (buffer.remaining()>0) {
       byte b = buffer.get();
       System.out.print((char)b);
       i++;
   }
   #+end_src
   
   ## here type should be the same as the above ones. All vars should be shared, if only they match. A child will inheritates property from its parent. if header 1 contains header 2, then header 1 is the parent, header 2 is the child.
   ## So in below header, it will inheritates 'type' and 'file-name' property from the first one.
** fill a buffer with byte[]
   We assume buffer's type is alwasys ByteBuffer.
   
   TODO: improved this. Now I don't know how to make use of the parameters. If buffer's type don't match content's type, then create different codes. 
   TODO: the buffer variable name should be prompt.
   #+name: content
   #+begin_src java
   @(if (for write))
   buffer.clear();
   // fill the buffer with contents to write to a file
   final byte[] message = { 83, 111, 109, 101, 32, 98, 121, 116, 101, 115, 46 };
   for (int i=0; i<message.length; ++i) {
       buffer.put( message[i] );
   }
   #+end_src
   
   ## how to express: this header is dependent on create-channel, type out? I think don't try to do this, this should be ensured by the user
   => by the annotation @(if). Haha
** write to channel from buffer
   #+name: content
   #+begin_src java
   @(if (for write))
   buffer.flip();
   fc.write(buffer);
   #+end_src
   
   
* snippet
* shortcut: aaa
** read file content
   The file-name in create-channel will be prompt. and only this one.

   #+NAME: header
   #+begin_src elisp
   (
    ((command import-needed-package))
    
    ((command  create-channel) (for read) (part part1) )
    ((command  create-buffer) (type Byte)  (size 1024))
    ((command  read-from-channel-to-buffer) (part  part1))
    ((command  extract-buffer) (content-type byte ))
    ((command  read-from-channel-to-buffer) (part  part2))

    ((command  create-channel) (for read) (part part2))
    )
   #+end_src
** a test
    #+NAME: header
   #+begin_src elisp
   (
    ((command  create-channel) (for read) (part part1) )
    ((command  create-buffer) (type Double) (method allocate) (size 1024))
    ((command  read-from-channel-to-buffer) (part  part1))
    ((command  extract-buffer) (content-type byte ))
    ((command  read-from-channel-to-buffer) (part  part2))

    ((command  create-channel) (for read) (part part2))
    )
   #+end_src
** details
   This entry is used to delete every snippet.
    #+NAME: header
   #+begin_src elisp
   (())
   #+end_src
